# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T01:46:18+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field


class Empty(BaseModel):
    pass


class Category(Enum):
    CATEGORY_UNSPECIFIED = 'CATEGORY_UNSPECIFIED'
    RESOURCE_MANAGEMENT = 'RESOURCE_MANAGEMENT'
    SECURITY_POLICY = 'SECURITY_POLICY'
    DATA_DISCOVERY = 'DATA_DISCOVERY'


class GoogleCloudDataplexV1ActionFailedSecurityPolicyApply(BaseModel):
    asset: Optional[str] = Field(
        None,
        description='Resource name of one of the assets with failing security policy application. Populated for a lake or zone resource only.',
    )


class SchemaChange(Enum):
    SCHEMA_CHANGE_UNSPECIFIED = 'SCHEMA_CHANGE_UNSPECIFIED'
    INCOMPATIBLE = 'INCOMPATIBLE'
    MODIFIED = 'MODIFIED'


class GoogleCloudDataplexV1ActionIncompatibleDataSchema(BaseModel):
    existingSchema: Optional[str] = Field(
        None,
        description='The existing and expected schema of the table. The schema is provided as a JSON formatted structure listing columns and data types.',
    )
    newSchema: Optional[str] = Field(
        None,
        description='The new and incompatible schema within the table. The schema is provided as a JSON formatted structured listing columns and data types.',
    )
    sampledDataLocations: Optional[List[str]] = Field(
        None,
        description='The list of data locations sampled and used for format/schema inference.',
    )
    schemaChange: Optional[SchemaChange] = Field(
        None,
        description='Whether the action relates to a schema that is incompatible or modified.',
    )
    table: Optional[str] = Field(
        None, description='The name of the table containing invalid data.'
    )


class GoogleCloudDataplexV1ActionInvalidDataFormat(BaseModel):
    expectedFormat: Optional[str] = Field(
        None, description='The expected data format of the entity.'
    )
    newFormat: Optional[str] = Field(
        None, description='The new unexpected data format within the entity.'
    )
    sampledDataLocations: Optional[List[str]] = Field(
        None,
        description='The list of data locations sampled and used for format/schema inference.',
    )


class GoogleCloudDataplexV1ActionInvalidDataOrganization(BaseModel):
    pass


class ExpectedStructure(Enum):
    PARTITION_STRUCTURE_UNSPECIFIED = 'PARTITION_STRUCTURE_UNSPECIFIED'
    CONSISTENT_KEYS = 'CONSISTENT_KEYS'
    HIVE_STYLE_KEYS = 'HIVE_STYLE_KEYS'


class GoogleCloudDataplexV1ActionInvalidDataPartition(BaseModel):
    expectedStructure: Optional[ExpectedStructure] = Field(
        None, description='The issue type of InvalidDataPartition.'
    )


class GoogleCloudDataplexV1ActionMissingData(BaseModel):
    pass


class GoogleCloudDataplexV1ActionMissingResource(BaseModel):
    pass


class GoogleCloudDataplexV1ActionUnauthorizedResource(BaseModel):
    pass


class State(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    ACTIVE = 'ACTIVE'
    CREATING = 'CREATING'
    DELETING = 'DELETING'
    ACTION_REQUIRED = 'ACTION_REQUIRED'


class GoogleCloudDataplexV1AssetDiscoverySpecCsvOptions(BaseModel):
    delimiter: Optional[str] = Field(
        None,
        description="Optional. The delimiter being used to separate values. This defaults to ','.",
    )
    disableTypeInference: Optional[bool] = Field(
        None,
        description='Optional. Whether to disable the inference of data type for CSV data. If true, all columns will be registered as strings.',
    )
    encoding: Optional[str] = Field(
        None,
        description='Optional. The character encoding of the data. The default is UTF-8.',
    )
    headerRows: Optional[int] = Field(
        None,
        description='Optional. The number of rows to interpret as header rows that should be skipped when reading data rows.',
    )


class GoogleCloudDataplexV1AssetDiscoverySpecJsonOptions(BaseModel):
    disableTypeInference: Optional[bool] = Field(
        None,
        description='Optional. Whether to disable the inference of data type for Json data. If true, all columns will be registered as their primitive types (strings, number or boolean).',
    )
    encoding: Optional[str] = Field(
        None,
        description='Optional. The character encoding of the data. The default is UTF-8.',
    )


class State1(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    SCHEDULED = 'SCHEDULED'
    IN_PROGRESS = 'IN_PROGRESS'
    PAUSED = 'PAUSED'
    DISABLED = 'DISABLED'


class GoogleCloudDataplexV1AssetDiscoveryStatusStats(BaseModel):
    dataItems: Optional[str] = Field(
        None, description='The count of data items within the referenced resource.'
    )
    dataSize: Optional[str] = Field(
        None,
        description='The number of stored data bytes within the referenced resource.',
    )
    filesets: Optional[str] = Field(
        None,
        description='The count of fileset entities within the referenced resource.',
    )
    tables: Optional[str] = Field(
        None, description='The count of table entities within the referenced resource.'
    )


class ReadAccessMode(Enum):
    ACCESS_MODE_UNSPECIFIED = 'ACCESS_MODE_UNSPECIFIED'
    DIRECT = 'DIRECT'
    MANAGED = 'MANAGED'


class Type(Enum):
    TYPE_UNSPECIFIED = 'TYPE_UNSPECIFIED'
    STORAGE_BUCKET = 'STORAGE_BUCKET'
    BIGQUERY_DATASET = 'BIGQUERY_DATASET'


class GoogleCloudDataplexV1AssetResourceSpec(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Immutable. Relative name of the cloud resource that contains the data that is being managed within a lake. For example: projects/{project_number}/buckets/{bucket_id} projects/{project_number}/datasets/{dataset_id}',
    )
    readAccessMode: Optional[ReadAccessMode] = Field(
        None,
        description='Optional. Determines how read permissions are handled for each asset and their associated tables. Only available to storage buckets assets.',
    )
    type: Optional[Type] = Field(
        None, description='Required. Immutable. Type of resource.'
    )


class State2(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    READY = 'READY'
    ERROR = 'ERROR'


class GoogleCloudDataplexV1AssetResourceStatus(BaseModel):
    managedAccessIdentity: Optional[str] = Field(
        None,
        description='Output only. Service account associated with the BigQuery Connection.',
    )
    message: Optional[str] = Field(
        None, description='Additional information about the current state.'
    )
    state: Optional[State2] = Field(
        None, description='The current state of the managed resource.'
    )
    updateTime: Optional[str] = Field(
        None, description='Last update time of the status.'
    )


class State3(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    READY = 'READY'
    APPLYING = 'APPLYING'
    ERROR = 'ERROR'


class GoogleCloudDataplexV1AssetSecurityStatus(BaseModel):
    message: Optional[str] = Field(
        None, description='Additional information about the current state.'
    )
    state: Optional[State3] = Field(
        None,
        description='The current state of the security policy applied to the attached resource.',
    )
    updateTime: Optional[str] = Field(
        None, description='Last update time of the status.'
    )


class GoogleCloudDataplexV1AssetStatus(BaseModel):
    activeAssets: Optional[int] = Field(None, description='Number of active assets.')
    securityPolicyApplyingAssets: Optional[int] = Field(
        None,
        description='Number of assets that are in process of updating the security policy on attached resources.',
    )
    updateTime: Optional[str] = Field(
        None, description='Last update time of the status.'
    )


class GoogleCloudDataplexV1CancelJobRequest(BaseModel):
    pass


class KernelType(Enum):
    KERNEL_TYPE_UNSPECIFIED = 'KERNEL_TYPE_UNSPECIFIED'
    PYTHON3 = 'PYTHON3'


class GoogleCloudDataplexV1ContentNotebook(BaseModel):
    kernelType: Optional[KernelType] = Field(
        None, description='Required. Kernel Type of the notebook.'
    )


class Engine(Enum):
    QUERY_ENGINE_UNSPECIFIED = 'QUERY_ENGINE_UNSPECIFIED'
    SPARK = 'SPARK'


class GoogleCloudDataplexV1ContentSqlScript(BaseModel):
    engine: Optional[Engine] = Field(
        None, description='Required. Query Engine to be used for the Sql Query.'
    )


class GoogleCloudDataplexV1DataAccessSpec(BaseModel):
    readers: Optional[List[str]] = Field(
        None,
        description='Optional. The format of strings follows the pattern followed by IAM in the bindings. user:{email}, serviceAccount:{email} group:{email}. The set of principals to be granted reader role on data stored within resources.',
    )


class GoogleCloudDataplexV1DataAttributeBindingPath(BaseModel):
    attributes: Optional[List[str]] = Field(
        None,
        description='Optional. List of attributes to be associated with the path of the resource, provided in the form: projects/{project}/locations/{location}/dataTaxonomies/{dataTaxonomy}/attributes/{data_attribute_id}',
    )
    name: Optional[str] = Field(
        None,
        description="Required. The name identifier of the path. Nested columns should be of the form: 'address.city'.",
    )


class GoogleCloudDataplexV1DataProfileResultProfileFieldProfileInfoDoubleFieldInfo(
    BaseModel
):
    average: Optional[float] = Field(
        None,
        description='Average of non-null values in the scanned data. NaN, if the field has a NaN.',
    )
    max: Optional[float] = Field(
        None,
        description='Maximum of non-null values in the scanned data. NaN, if the field has a NaN.',
    )
    min: Optional[float] = Field(
        None,
        description='Minimum of non-null values in the scanned data. NaN, if the field has a NaN.',
    )
    quartiles: Optional[List[float]] = Field(
        None,
        description='A quartile divides the number of data points into four parts, or quarters, of more-or-less equal size. Three main quartiles used are: The first quartile (Q1) splits off the lowest 25% of data from the highest 75%. It is also known as the lower or 25th empirical quartile, as 25% of the data is below this point. The second quartile (Q2) is the median of a data set. So, 50% of the data lies below this point. The third quartile (Q3) splits off the highest 25% of data from the lowest 75%. It is known as the upper or 75th empirical quartile, as 75% of the data lies below this point. Here, the quartiles is provided as an ordered list of quartile values for the scanned data, occurring in order Q1, median, Q3.',
    )
    standardDeviation: Optional[float] = Field(
        None,
        description='Standard deviation of non-null values in the scanned data. NaN, if the field has a NaN.',
    )


class GoogleCloudDataplexV1DataProfileResultProfileFieldProfileInfoIntegerFieldInfo(
    BaseModel
):
    average: Optional[float] = Field(
        None,
        description='Average of non-null values in the scanned data. NaN, if the field has a NaN.',
    )
    max: Optional[str] = Field(
        None,
        description='Maximum of non-null values in the scanned data. NaN, if the field has a NaN.',
    )
    min: Optional[str] = Field(
        None,
        description='Minimum of non-null values in the scanned data. NaN, if the field has a NaN.',
    )
    quartiles: Optional[List[str]] = Field(
        None,
        description='A quartile divides the number of data points into four parts, or quarters, of more-or-less equal size. Three main quartiles used are: The first quartile (Q1) splits off the lowest 25% of data from the highest 75%. It is also known as the lower or 25th empirical quartile, as 25% of the data is below this point. The second quartile (Q2) is the median of a data set. So, 50% of the data lies below this point. The third quartile (Q3) splits off the highest 25% of data from the lowest 75%. It is known as the upper or 75th empirical quartile, as 75% of the data lies below this point. Here, the quartiles is provided as an ordered list of quartile values for the scanned data, occurring in order Q1, median, Q3.',
    )
    standardDeviation: Optional[float] = Field(
        None,
        description='Standard deviation of non-null values in the scanned data. NaN, if the field has a NaN.',
    )


class GoogleCloudDataplexV1DataProfileResultProfileFieldProfileInfoStringFieldInfo(
    BaseModel
):
    averageLength: Optional[float] = Field(
        None, description='Average length of non-null values in the scanned data.'
    )
    maxLength: Optional[str] = Field(
        None, description='Maximum length of non-null values in the scanned data.'
    )
    minLength: Optional[str] = Field(
        None, description='Minimum length of non-null values in the scanned data.'
    )


class GoogleCloudDataplexV1DataProfileResultProfileFieldProfileInfoTopNValue(BaseModel):
    count: Optional[str] = Field(
        None, description='Count of the corresponding value in the scanned data.'
    )
    value: Optional[str] = Field(
        None, description='String value of a top N non-null value.'
    )


class GoogleCloudDataplexV1DataProfileSpec(BaseModel):
    pass


class GoogleCloudDataplexV1DataQualityDimensionResult(BaseModel):
    passed: Optional[bool] = Field(
        None, description='Whether the dimension passed or failed.'
    )


class GoogleCloudDataplexV1DataQualityRuleNonNullExpectation(BaseModel):
    pass


class GoogleCloudDataplexV1DataQualityRuleRangeExpectation(BaseModel):
    maxValue: Optional[str] = Field(
        None,
        description='Optional. The maximum column value allowed for a row to pass this validation. At least one of min_value and max_value need to be provided.',
    )
    minValue: Optional[str] = Field(
        None,
        description='Optional. The minimum column value allowed for a row to pass this validation. At least one of min_value and max_value need to be provided.',
    )
    strictMaxEnabled: Optional[bool] = Field(
        None,
        description="Optional. Whether each value needs to be strictly lesser than ('<') the maximum, or if equality is allowed.Only relevant if a max_value has been defined. Default = false.",
    )
    strictMinEnabled: Optional[bool] = Field(
        None,
        description="Optional. Whether each value needs to be strictly greater than ('>') the minimum, or if equality is allowed.Only relevant if a min_value has been defined. Default = false.",
    )


class GoogleCloudDataplexV1DataQualityRuleRegexExpectation(BaseModel):
    regex: Optional[str] = Field(
        None, description='A regular expression the column value is expected to match.'
    )


class GoogleCloudDataplexV1DataQualityRuleRowConditionExpectation(BaseModel):
    sqlExpression: Optional[str] = Field(None, description='The SQL expression.')


class GoogleCloudDataplexV1DataQualityRuleSetExpectation(BaseModel):
    values: Optional[List[str]] = Field(
        None, description='Expected values for the column value.'
    )


class Statistic(Enum):
    STATISTIC_UNDEFINED = 'STATISTIC_UNDEFINED'
    MEAN = 'MEAN'
    MIN = 'MIN'
    MAX = 'MAX'


class GoogleCloudDataplexV1DataQualityRuleStatisticRangeExpectation(BaseModel):
    maxValue: Optional[str] = Field(
        None,
        description='The maximum column statistic value allowed for a row to pass this validation.At least one of min_value and max_value need to be provided.',
    )
    minValue: Optional[str] = Field(
        None,
        description='The minimum column statistic value allowed for a row to pass this validation.At least one of min_value and max_value need to be provided.',
    )
    statistic: Optional[Statistic] = Field(
        None, description='The aggregate metric to evaluate.'
    )
    strictMaxEnabled: Optional[bool] = Field(
        None,
        description="Whether column statistic needs to be strictly lesser than ('<') the maximum, or if equality is allowed.Only relevant if a max_value has been defined. Default = false.",
    )
    strictMinEnabled: Optional[bool] = Field(
        None,
        description="Whether column statistic needs to be strictly greater than ('>') the minimum, or if equality is allowed.Only relevant if a min_value has been defined. Default = false.",
    )


class GoogleCloudDataplexV1DataQualityRuleTableConditionExpectation(BaseModel):
    sqlExpression: Optional[str] = Field(None, description='The SQL expression.')


class GoogleCloudDataplexV1DataQualityRuleUniquenessExpectation(BaseModel):
    pass


class State4(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    ACTIVE = 'ACTIVE'
    CREATING = 'CREATING'
    DELETING = 'DELETING'
    ACTION_REQUIRED = 'ACTION_REQUIRED'


class Type1(Enum):
    DATA_SCAN_TYPE_UNSPECIFIED = 'DATA_SCAN_TYPE_UNSPECIFIED'
    DATA_QUALITY = 'DATA_QUALITY'
    DATA_PROFILE = 'DATA_PROFILE'


class Scope(Enum):
    SCOPE_UNSPECIFIED = 'SCOPE_UNSPECIFIED'
    FULL = 'FULL'
    INCREMENTAL = 'INCREMENTAL'


class State5(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    STARTED = 'STARTED'
    SUCCEEDED = 'SUCCEEDED'
    FAILED = 'FAILED'
    CANCELLED = 'CANCELLED'


class Trigger(Enum):
    TRIGGER_UNSPECIFIED = 'TRIGGER_UNSPECIFIED'
    ON_DEMAND = 'ON_DEMAND'
    SCHEDULE = 'SCHEDULE'


class Type2(Enum):
    SCAN_TYPE_UNSPECIFIED = 'SCAN_TYPE_UNSPECIFIED'
    DATA_PROFILE = 'DATA_PROFILE'
    DATA_QUALITY = 'DATA_QUALITY'


class GoogleCloudDataplexV1DataScanEventDataProfileResult(BaseModel):
    rowCount: Optional[str] = Field(
        None, description='The count of rows processed in the data scan job.'
    )


class GoogleCloudDataplexV1DataScanEventDataQualityResult(BaseModel):
    dimensionPassed: Optional[Dict[str, bool]] = Field(
        None,
        description='The result of each dimension for data quality result. The key of the map is the name of the dimension. The value is the bool value depicting whether the dimension result was pass or not.',
    )
    passed: Optional[bool] = Field(
        None, description='Whether the data quality result was pass or not.'
    )
    rowCount: Optional[str] = Field(
        None, description='The count of rows processed in the data scan job.'
    )


class GoogleCloudDataplexV1DataScanExecutionStatus(BaseModel):
    latestJobEndTime: Optional[str] = Field(
        None, description='The time when the latest DataScanJob ended.'
    )
    latestJobStartTime: Optional[str] = Field(
        None, description='The time when the latest DataScanJob started.'
    )


class State6(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    RUNNING = 'RUNNING'
    CANCELING = 'CANCELING'
    CANCELLED = 'CANCELLED'
    SUCCEEDED = 'SUCCEEDED'
    FAILED = 'FAILED'
    PENDING = 'PENDING'


class Type3(Enum):
    DATA_SCAN_TYPE_UNSPECIFIED = 'DATA_SCAN_TYPE_UNSPECIFIED'
    DATA_QUALITY = 'DATA_QUALITY'
    DATA_PROFILE = 'DATA_PROFILE'


class GoogleCloudDataplexV1DataSource(BaseModel):
    entity: Optional[str] = Field(
        None,
        description='Immutable. The Dataplex entity that represents the data source (e.g. BigQuery table) for DataScan, of the form: projects/{project_number}/locations/{location_id}/lakes/{lake_id}/zones/{zone_id}/entities/{entity_id}.',
    )
    resource: Optional[str] = Field(
        None,
        description='Immutable. The service-qualified full resource name of the cloud resource for a DataScan job to scan against. The field could be: BigQuery table of type "TABLE" for DataProfileScan/DataQualityScan Format: //bigquery.googleapis.com/projects/PROJECT_ID/datasets/DATASET_ID/tables/TABLE_ID',
    )


class GoogleCloudDataplexV1DataTaxonomy(BaseModel):
    attributeCount: Optional[int] = Field(
        None, description='Output only. The number of attributes in the DataTaxonomy.'
    )
    createTime: Optional[str] = Field(
        None, description='Output only. The time when the DataTaxonomy was created.'
    )
    description: Optional[str] = Field(
        None, description='Optional. Description of the DataTaxonomy.'
    )
    displayName: Optional[str] = Field(
        None, description='Optional. User friendly display name.'
    )
    etag: Optional[str] = Field(
        None,
        description='This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.',
    )
    labels: Optional[Dict[str, str]] = Field(
        None, description='Optional. User-defined labels for the DataTaxonomy.'
    )
    name: Optional[str] = Field(
        None,
        description='Output only. The relative resource name of the DataTaxonomy, of the form: projects/{project_number}/locations/{location_id}/dataTaxonomies/{data_taxonomy_id}.',
    )
    uid: Optional[str] = Field(
        None,
        description='Output only. System generated globally unique ID for the dataTaxonomy. This ID will be different if the DataTaxonomy is deleted and re-created with the same name.',
    )
    updateTime: Optional[str] = Field(
        None,
        description='Output only. The time when the DataTaxonomy was last updated.',
    )


class Type4(Enum):
    EVENT_TYPE_UNSPECIFIED = 'EVENT_TYPE_UNSPECIFIED'
    CONFIG = 'CONFIG'
    ENTITY_CREATED = 'ENTITY_CREATED'
    ENTITY_UPDATED = 'ENTITY_UPDATED'
    ENTITY_DELETED = 'ENTITY_DELETED'
    PARTITION_CREATED = 'PARTITION_CREATED'
    PARTITION_UPDATED = 'PARTITION_UPDATED'
    PARTITION_DELETED = 'PARTITION_DELETED'


class GoogleCloudDataplexV1DiscoveryEventActionDetails(BaseModel):
    type: Optional[str] = Field(
        None,
        description='The type of action. Eg. IncompatibleDataSchema, InvalidDataFormat',
    )


class GoogleCloudDataplexV1DiscoveryEventConfigDetails(BaseModel):
    parameters: Optional[Dict[str, str]] = Field(
        None,
        description='A list of discovery configuration parameters in effect. The keys are the field paths within DiscoverySpec. Eg. includePatterns, excludePatterns, csvOptions.disableTypeInference, etc.',
    )


class Type5(Enum):
    ENTITY_TYPE_UNSPECIFIED = 'ENTITY_TYPE_UNSPECIFIED'
    TABLE = 'TABLE'
    FILESET = 'FILESET'


class GoogleCloudDataplexV1DiscoveryEventEntityDetails(BaseModel):
    entity: Optional[str] = Field(
        None,
        description='The name of the entity resource. The name is the fully-qualified resource name.',
    )
    type: Optional[Type5] = Field(None, description='The type of the entity resource.')


class GoogleCloudDataplexV1DiscoveryEventPartitionDetails(BaseModel):
    entity: Optional[str] = Field(
        None,
        description='The name to the containing entity resource. The name is the fully-qualified resource name.',
    )
    partition: Optional[str] = Field(
        None,
        description='The name to the partition resource. The name is the fully-qualified resource name.',
    )
    sampledDataLocations: Optional[List[str]] = Field(
        None,
        description='The locations of the data items (e.g., a Cloud Storage objects) sampled for metadata inference.',
    )
    type: Optional[Type5] = Field(
        None, description='The type of the containing entity resource.'
    )


class System(Enum):
    STORAGE_SYSTEM_UNSPECIFIED = 'STORAGE_SYSTEM_UNSPECIFIED'
    CLOUD_STORAGE = 'CLOUD_STORAGE'
    BIGQUERY = 'BIGQUERY'


class Type7(Enum):
    TYPE_UNSPECIFIED = 'TYPE_UNSPECIFIED'
    TABLE = 'TABLE'
    FILESET = 'FILESET'


class GoogleCloudDataplexV1EntityCompatibilityStatusCompatibility(BaseModel):
    compatible: Optional[bool] = Field(
        None,
        description='Output only. Whether the entity is compatible and can be represented in the metadata store.',
    )
    reason: Optional[str] = Field(
        None,
        description='Output only. Provides additional detail if the entity is incompatible with the metadata store.',
    )


class State7(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    ACTIVE = 'ACTIVE'
    CREATING = 'CREATING'
    DELETING = 'DELETING'
    ACTION_REQUIRED = 'ACTION_REQUIRED'


class GoogleCloudDataplexV1EnvironmentEndpoints(BaseModel):
    notebooks: Optional[str] = Field(
        None, description='Output only. URI to serve notebook APIs'
    )
    sql: Optional[str] = Field(None, description='Output only. URI to serve SQL APIs')


class GoogleCloudDataplexV1EnvironmentInfrastructureSpecComputeResources(BaseModel):
    diskSizeGb: Optional[int] = Field(
        None, description='Optional. Size in GB of the disk. Default is 100 GB.'
    )
    maxNodeCount: Optional[int] = Field(
        None,
        description='Optional. Max configurable nodes. If max_node_count > node_count, then auto-scaling is enabled.',
    )
    nodeCount: Optional[int] = Field(
        None,
        description='Optional. Total number of nodes in the sessions created for this environment.',
    )


class GoogleCloudDataplexV1EnvironmentInfrastructureSpecOsImageRuntime(BaseModel):
    imageVersion: Optional[str] = Field(
        None, description='Required. Dataplex Image version.'
    )
    javaLibraries: Optional[List[str]] = Field(
        None,
        description='Optional. List of Java jars to be included in the runtime environment. Valid input includes Cloud Storage URIs to Jar binaries. For example, gs://bucket-name/my/path/to/file.jar',
    )
    properties: Optional[Dict[str, str]] = Field(
        None,
        description='Optional. Spark properties to provide configuration for use in sessions created for this environment. The properties to set on daemon config files. Property keys are specified in prefix:property format. The prefix must be "spark".',
    )
    pythonPackages: Optional[List[str]] = Field(
        None,
        description='Optional. A list of python packages to be installed. Valid formats include Cloud Storage URI to a PIP installable library. For example, gs://bucket-name/my/path/to/lib.tar.gz',
    )


class GoogleCloudDataplexV1EnvironmentSessionSpec(BaseModel):
    enableFastStartup: Optional[bool] = Field(
        None,
        description='Optional. If True, this causes sessions to be pre-created and available for faster startup to enable interactive exploration use-cases. This defaults to False to avoid additional billed charges. These can only be set to True for the environment with name set to "default", and with default configuration.',
    )
    maxIdleDuration: Optional[str] = Field(
        None,
        description='Optional. The idle time configuration of the session. The session will be auto-terminated at the end of this period.',
    )


class GoogleCloudDataplexV1EnvironmentSessionStatus(BaseModel):
    active: Optional[bool] = Field(
        None,
        description='Output only. Queries over sessions to mark whether the environment is currently active or not',
    )


class Service(Enum):
    SERVICE_UNSPECIFIED = 'SERVICE_UNSPECIFIED'
    DATAPROC = 'DATAPROC'


class State8(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    RUNNING = 'RUNNING'
    CANCELLING = 'CANCELLING'
    CANCELLED = 'CANCELLED'
    SUCCEEDED = 'SUCCEEDED'
    FAILED = 'FAILED'
    ABORTED = 'ABORTED'


class GoogleCloudDataplexV1Job(BaseModel):
    endTime: Optional[str] = Field(
        None, description='Output only. The time when the job ended.'
    )
    message: Optional[str] = Field(
        None, description='Output only. Additional information about the current state.'
    )
    name: Optional[str] = Field(
        None,
        description='Output only. The relative resource name of the job, of the form: projects/{project_number}/locations/{location_id}/lakes/{lake_id}/tasks/{task_id}/jobs/{job_id}.',
    )
    retryCount: Optional[int] = Field(
        None,
        description='Output only. The number of times the job has been retried (excluding the initial attempt).',
    )
    service: Optional[Service] = Field(
        None, description='Output only. The underlying service running a job.'
    )
    serviceJob: Optional[str] = Field(
        None,
        description='Output only. The full resource name for the job run under a particular service.',
    )
    startTime: Optional[str] = Field(
        None, description='Output only. The time when the job was started.'
    )
    state: Optional[State8] = Field(
        None, description='Output only. Execution state for the job.'
    )
    uid: Optional[str] = Field(
        None,
        description='Output only. System generated globally unique ID for the job.',
    )


class State9(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    SUCCEEDED = 'SUCCEEDED'
    FAILED = 'FAILED'
    CANCELLED = 'CANCELLED'
    ABORTED = 'ABORTED'


class Type8(Enum):
    TYPE_UNSPECIFIED = 'TYPE_UNSPECIFIED'
    SPARK = 'SPARK'
    NOTEBOOK = 'NOTEBOOK'


class GoogleCloudDataplexV1JobEvent(BaseModel):
    endTime: Optional[str] = Field(
        None, description='The time when the job ended running.'
    )
    jobId: Optional[str] = Field(None, description='The unique id identifying the job.')
    message: Optional[str] = Field(None, description='The log message.')
    retries: Optional[int] = Field(None, description='The number of retries.')
    service: Optional[Service] = Field(
        None, description='The service used to execute the job.'
    )
    serviceJob: Optional[str] = Field(
        None, description='The reference to the job within the service.'
    )
    startTime: Optional[str] = Field(
        None, description='The time when the job started running.'
    )
    state: Optional[State9] = Field(None, description='The job state on completion.')
    type: Optional[Type8] = Field(None, description='The type of the job.')


class State10(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    ACTIVE = 'ACTIVE'
    CREATING = 'CREATING'
    DELETING = 'DELETING'
    ACTION_REQUIRED = 'ACTION_REQUIRED'


class GoogleCloudDataplexV1LakeMetastore(BaseModel):
    service: Optional[str] = Field(
        None,
        description='Optional. A relative reference to the Dataproc Metastore (https://cloud.google.com/dataproc-metastore/docs) service associated with the lake: projects/{project_id}/locations/{location_id}/services/{service_id}',
    )


class State11(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    NONE = 'NONE'
    READY = 'READY'
    UPDATING = 'UPDATING'
    ERROR = 'ERROR'


class GoogleCloudDataplexV1LakeMetastoreStatus(BaseModel):
    endpoint: Optional[str] = Field(
        None,
        description='The URI of the endpoint used to access the Metastore service.',
    )
    message: Optional[str] = Field(
        None, description='Additional information about the current status.'
    )
    state: Optional[State11] = Field(None, description='Current state of association.')
    updateTime: Optional[str] = Field(
        None, description='Last update time of the metastore status of the lake.'
    )


class GoogleCloudDataplexV1ListDataTaxonomiesResponse(BaseModel):
    dataTaxonomies: Optional[List[GoogleCloudDataplexV1DataTaxonomy]] = Field(
        None, description='DataTaxonomies under the given parent location.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='Token to retrieve the next page of results, or empty if there are no more results in the list.',
    )
    unreachableLocations: Optional[List[str]] = Field(
        None, description='Locations that could not be reached.'
    )


class GoogleCloudDataplexV1ListJobsResponse(BaseModel):
    jobs: Optional[List[GoogleCloudDataplexV1Job]] = Field(
        None, description='Jobs under a given task.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='Token to retrieve the next page of results, or empty if there are no more results in the list.',
    )


class GoogleCloudDataplexV1OperationMetadata(BaseModel):
    apiVersion: Optional[str] = Field(
        None, description='Output only. API version used to start the operation.'
    )
    createTime: Optional[str] = Field(
        None, description='Output only. The time the operation was created.'
    )
    endTime: Optional[str] = Field(
        None, description='Output only. The time the operation finished running.'
    )
    requestedCancellation: Optional[bool] = Field(
        None,
        description='Output only. Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to Code.CANCELLED.',
    )
    statusMessage: Optional[str] = Field(
        None, description='Output only. Human-readable status of the operation, if any.'
    )
    target: Optional[str] = Field(
        None,
        description='Output only. Server-defined resource path for the target of the operation.',
    )
    verb: Optional[str] = Field(
        None, description='Output only. Name of the verb executed by the operation.'
    )


class GoogleCloudDataplexV1Partition(BaseModel):
    etag: Optional[str] = Field(
        None, description='Optional. The etag for this partition.'
    )
    location: Optional[str] = Field(
        None,
        description='Required. Immutable. The location of the entity data within the partition, for example, gs://bucket/path/to/entity/key1=value1/key2=value2. Or projects//datasets//tables/',
    )
    name: Optional[str] = Field(
        None,
        description='Output only. Partition values used in the HTTP URL must be double encoded. For example, url_encode(url_encode(value)) can be used to encode "US:CA/CA#Sunnyvale so that the request URL ends with "/partitions/US%253ACA/CA%2523Sunnyvale". The name field in the response retains the encoded format.',
    )
    values: Optional[List[str]] = Field(
        None,
        description='Required. Immutable. The set of values representing the partition, which correspond to the partition schema defined in the parent entity.',
    )


class GoogleCloudDataplexV1ResourceAccessSpec(BaseModel):
    owners: Optional[List[str]] = Field(
        None,
        description='Optional. The set of principals to be granted owner role on the resource.',
    )
    readers: Optional[List[str]] = Field(
        None,
        description='Optional. The format of strings follows the pattern followed by IAM in the bindings. user:{email}, serviceAccount:{email} group:{email}. The set of principals to be granted reader role on the resource.',
    )
    writers: Optional[List[str]] = Field(
        None,
        description='Optional. The set of principals to be granted writer role on the resource.',
    )


class GoogleCloudDataplexV1RunDataScanRequest(BaseModel):
    pass


class GoogleCloudDataplexV1RunTaskRequest(BaseModel):
    pass


class GoogleCloudDataplexV1RunTaskResponse(BaseModel):
    job: Optional[GoogleCloudDataplexV1Job] = Field(
        None, description='Jobs created by RunTask API.'
    )


class GoogleCloudDataplexV1ScannedDataIncrementalField(BaseModel):
    end: Optional[str] = Field(
        None, description='Value that marks the end of the range.'
    )
    field: Optional[str] = Field(
        None,
        description='The field that contains values which monotonically increases over time (e.g. a timestamp column).',
    )
    start: Optional[str] = Field(
        None, description='Value that marks the start of the range.'
    )


class PartitionStyle(Enum):
    PARTITION_STYLE_UNSPECIFIED = 'PARTITION_STYLE_UNSPECIFIED'
    HIVE_COMPATIBLE = 'HIVE_COMPATIBLE'


class Type9(Enum):
    TYPE_UNSPECIFIED = 'TYPE_UNSPECIFIED'
    BOOLEAN = 'BOOLEAN'
    BYTE = 'BYTE'
    INT16 = 'INT16'
    INT32 = 'INT32'
    INT64 = 'INT64'
    FLOAT = 'FLOAT'
    DOUBLE = 'DOUBLE'
    DECIMAL = 'DECIMAL'
    STRING = 'STRING'
    BINARY = 'BINARY'
    TIMESTAMP = 'TIMESTAMP'
    DATE = 'DATE'
    TIME = 'TIME'
    RECORD = 'RECORD'
    NULL = 'NULL'


class GoogleCloudDataplexV1SchemaPartitionField(BaseModel):
    name: Optional[str] = Field(
        None,
        description='Required. Partition field name must consist of letters, numbers, and underscores only, with a maximum of length of 256 characters, and must begin with a letter or underscore..',
    )
    type: Optional[Type9] = Field(
        None, description='Required. Immutable. The type of field.'
    )


class Mode(Enum):
    MODE_UNSPECIFIED = 'MODE_UNSPECIFIED'
    REQUIRED = 'REQUIRED'
    NULLABLE = 'NULLABLE'
    REPEATED = 'REPEATED'


class GoogleCloudDataplexV1SchemaSchemaField(BaseModel):
    description: Optional[str] = Field(
        None,
        description='Optional. User friendly field description. Must be less than or equal to 1024 characters.',
    )
    fields: Optional[List[GoogleCloudDataplexV1SchemaSchemaField]] = Field(
        None, description='Optional. Any nested field for complex types.'
    )
    mode: Optional[Mode] = Field(
        None, description='Required. Additional field semantics.'
    )
    name: Optional[str] = Field(
        None,
        description='Required. The name of the field. Must contain only letters, numbers and underscores, with a maximum length of 767 characters, and must begin with a letter or underscore.',
    )
    type: Optional[Type9] = Field(None, description='Required. The type of field.')


class State12(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    ACTIVE = 'ACTIVE'
    CREATING = 'CREATING'
    DELETING = 'DELETING'
    ACTION_REQUIRED = 'ACTION_REQUIRED'


class GoogleCloudDataplexV1Session(BaseModel):
    createTime: Optional[str] = Field(
        None, description='Output only. Session start time.'
    )
    name: Optional[str] = Field(
        None,
        description='Output only. The relative resource name of the content, of the form: projects/{project_id}/locations/{location_id}/lakes/{lake_id}/environment/{environment_id}/sessions/{session_id}',
    )
    state: Optional[State12] = Field(None, description='Output only. State of Session')
    userId: Optional[str] = Field(
        None, description='Output only. Email of user running the session.'
    )


class Type11(Enum):
    EVENT_TYPE_UNSPECIFIED = 'EVENT_TYPE_UNSPECIFIED'
    START = 'START'
    STOP = 'STOP'
    QUERY = 'QUERY'
    CREATE = 'CREATE'


class Engine1(Enum):
    ENGINE_UNSPECIFIED = 'ENGINE_UNSPECIFIED'
    SPARK_SQL = 'SPARK_SQL'
    BIGQUERY = 'BIGQUERY'


class GoogleCloudDataplexV1SessionEventQueryDetail(BaseModel):
    dataProcessedBytes: Optional[str] = Field(
        None, description='The data processed by the query.'
    )
    duration: Optional[str] = Field(
        None, description='Time taken for execution of the query.'
    )
    engine: Optional[Engine1] = Field(None, description='Query Execution engine.')
    queryId: Optional[str] = Field(
        None, description='The unique Query id identifying the query.'
    )
    queryText: Optional[str] = Field(None, description='The query text executed.')
    resultSizeBytes: Optional[str] = Field(
        None, description='The size of results the query produced.'
    )


class Read(Enum):
    ACCESS_MODE_UNSPECIFIED = 'ACCESS_MODE_UNSPECIFIED'
    DIRECT = 'DIRECT'
    MANAGED = 'MANAGED'


class GoogleCloudDataplexV1StorageAccess(BaseModel):
    read: Optional[Read] = Field(
        None,
        description='Output only. Describes the read access mechanism of the data. Not user settable.',
    )


class CompressionFormat(Enum):
    COMPRESSION_FORMAT_UNSPECIFIED = 'COMPRESSION_FORMAT_UNSPECIFIED'
    GZIP = 'GZIP'
    BZIP2 = 'BZIP2'


class Format(Enum):
    FORMAT_UNSPECIFIED = 'FORMAT_UNSPECIFIED'
    PARQUET = 'PARQUET'
    AVRO = 'AVRO'
    ORC = 'ORC'
    CSV = 'CSV'
    JSON = 'JSON'
    IMAGE = 'IMAGE'
    AUDIO = 'AUDIO'
    VIDEO = 'VIDEO'
    TEXT = 'TEXT'
    TFRECORD = 'TFRECORD'
    OTHER = 'OTHER'
    UNKNOWN = 'UNKNOWN'


class GoogleCloudDataplexV1StorageFormatCsvOptions(BaseModel):
    delimiter: Optional[str] = Field(
        None,
        description="Optional. The delimiter used to separate values. Defaults to ','.",
    )
    encoding: Optional[str] = Field(
        None,
        description='Optional. The character encoding of the data. Accepts "US-ASCII", "UTF-8", and "ISO-8859-1". Defaults to UTF-8 if unspecified.',
    )
    headerRows: Optional[int] = Field(
        None,
        description='Optional. The number of rows to interpret as header rows that should be skipped when reading data rows. Defaults to 0.',
    )
    quote: Optional[str] = Field(
        None,
        description='Optional. The character used to quote column values. Accepts \'"\' (double quotation mark) or \'\'\' (single quotation mark). Defaults to \'"\' (double quotation mark) if unspecified.',
    )


class GoogleCloudDataplexV1StorageFormatIcebergOptions(BaseModel):
    metadataLocation: Optional[str] = Field(
        None,
        description='Optional. The location of where the iceberg metadata is present, must be within the table path',
    )


class GoogleCloudDataplexV1StorageFormatJsonOptions(BaseModel):
    encoding: Optional[str] = Field(
        None,
        description='Optional. The character encoding of the data. Accepts "US-ASCII", "UTF-8" and "ISO-8859-1". Defaults to UTF-8 if not specified.',
    )


class GoogleCloudDataplexV1TaskExecutionSpec(BaseModel):
    args: Optional[Dict[str, str]] = Field(
        None,
        description='Optional. The arguments to pass to the task. The args can use placeholders of the format ${placeholder} as part of key/value string. These will be interpolated before passing the args to the driver. Currently supported placeholders: - ${task_id} - ${job_time} To pass positional args, set the key as TASK_ARGS. The value should be a comma-separated string of all the positional arguments. To use a delimiter other than comma, refer to https://cloud.google.com/sdk/gcloud/reference/topic/escaping. In case of other keys being present in the args, then TASK_ARGS will be passed as the last argument.',
    )
    kmsKey: Optional[str] = Field(
        None,
        description='Optional. The Cloud KMS key to use for encryption, of the form: projects/{project_number}/locations/{location_id}/keyRings/{key-ring-name}/cryptoKeys/{key-name}.',
    )
    maxJobExecutionLifetime: Optional[str] = Field(
        None,
        description='Optional. The maximum duration after which the job execution is expired.',
    )
    project: Optional[str] = Field(
        None,
        description='Optional. The project in which jobs are run. By default, the project containing the Lake is used. If a project is provided, the ExecutionSpec.service_account must belong to this project.',
    )
    serviceAccount: Optional[str] = Field(
        None,
        description='Required. Service account to use to execute a task. If not provided, the default Compute service account for the project is used.',
    )


class GoogleCloudDataplexV1TaskExecutionStatus(BaseModel):
    latestJob: Optional[GoogleCloudDataplexV1Job] = Field(
        None, description='Output only. latest job execution'
    )
    updateTime: Optional[str] = Field(
        None, description='Output only. Last update time of the status.'
    )


class GoogleCloudDataplexV1TaskInfrastructureSpecBatchComputeResources(BaseModel):
    executorsCount: Optional[int] = Field(
        None,
        description='Optional. Total number of job executors. Executor Count should be between 2 and 100. Default=2',
    )
    maxExecutorsCount: Optional[int] = Field(
        None,
        description='Optional. Max configurable executors. If max_executors_count > executors_count, then auto-scaling is enabled. Max Executor Count should be between 2 and 1000. Default=1000',
    )


class GoogleCloudDataplexV1TaskInfrastructureSpecContainerImageRuntime(BaseModel):
    image: Optional[str] = Field(None, description='Optional. Container image to use.')
    javaJars: Optional[List[str]] = Field(
        None,
        description='Optional. A list of Java JARS to add to the classpath. Valid input includes Cloud Storage URIs to Jar binaries. For example, gs://bucket-name/my/path/to/file.jar',
    )
    properties: Optional[Dict[str, str]] = Field(
        None,
        description='Optional. Override to common configuration of open source components installed on the Dataproc cluster. The properties to set on daemon config files. Property keys are specified in prefix:property format, for example core:hadoop.tmp.dir. For more information, see Cluster properties (https://cloud.google.com/dataproc/docs/concepts/cluster-properties).',
    )
    pythonPackages: Optional[List[str]] = Field(
        None,
        description='Optional. A list of python packages to be installed. Valid formats include Cloud Storage URI to a PIP installable library. For example, gs://bucket-name/my/path/to/lib.tar.gz',
    )


class GoogleCloudDataplexV1TaskInfrastructureSpecVpcNetwork(BaseModel):
    network: Optional[str] = Field(
        None,
        description='Optional. The Cloud VPC network in which the job is run. By default, the Cloud VPC network named Default within the project is used.',
    )
    networkTags: Optional[List[str]] = Field(
        None, description='Optional. List of network tags to apply to the job.'
    )
    subNetwork: Optional[str] = Field(
        None, description='Optional. The Cloud VPC sub-network in which the job is run.'
    )


class Type12(Enum):
    TYPE_UNSPECIFIED = 'TYPE_UNSPECIFIED'
    ON_DEMAND = 'ON_DEMAND'
    RECURRING = 'RECURRING'


class GoogleCloudDataplexV1TaskTriggerSpec(BaseModel):
    disabled: Optional[bool] = Field(
        None,
        description='Optional. Prevent the task from executing. This does not cancel already running tasks. It is intended to temporarily disable RECURRING tasks.',
    )
    maxRetries: Optional[int] = Field(
        None,
        description='Optional. Number of retry attempts before aborting. Set to zero to never attempt to retry a failed task.',
    )
    schedule: Optional[str] = Field(
        None,
        description='Optional. Cron schedule (https://en.wikipedia.org/wiki/Cron) for running tasks periodically. To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: "CRON_TZ=${IANA_TIME_ZONE}" or "TZ=${IANA_TIME_ZONE}". The ${IANA_TIME_ZONE} may only be a valid string from IANA time zone database. For example, CRON_TZ=America/New_York 1 * * * *, or TZ=America/New_York 1 * * * *. This field is required for RECURRING tasks.',
    )
    startTime: Optional[str] = Field(
        None,
        description='Optional. The first run of the task will be after this time. If not specified, the task will run shortly after being submitted if ON_DEMAND and based on the schedule if RECURRING.',
    )
    type: Optional[Type12] = Field(
        None,
        description='Required. Immutable. Trigger type of the user-specified Task.',
    )


class GoogleCloudDataplexV1TriggerOnDemand(BaseModel):
    pass


class GoogleCloudDataplexV1TriggerSchedule(BaseModel):
    cron: Optional[str] = Field(
        None,
        description='Required. Cron (https://en.wikipedia.org/wiki/Cron) schedule for running scans periodically.To explicitly set a timezone in the cron tab, apply a prefix in the cron tab: "CRON_TZ=${IANA_TIME_ZONE}" or "TZ=${IANA_TIME_ZONE}". The ${IANA_TIME_ZONE} may only be a valid string from IANA time zone database (wikipedia (https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List)). For example, CRON_TZ=America/New_York 1 * * * *, or TZ=America/New_York 1 * * * *.This field is required for Schedule scans.',
    )


class Type13(Enum):
    TYPE_UNSPECIFIED = 'TYPE_UNSPECIFIED'
    RAW = 'RAW'
    CURATED = 'CURATED'


class GoogleCloudDataplexV1ZoneDiscoverySpecCsvOptions(BaseModel):
    delimiter: Optional[str] = Field(
        None,
        description="Optional. The delimiter being used to separate values. This defaults to ','.",
    )
    disableTypeInference: Optional[bool] = Field(
        None,
        description='Optional. Whether to disable the inference of data type for CSV data. If true, all columns will be registered as strings.',
    )
    encoding: Optional[str] = Field(
        None,
        description='Optional. The character encoding of the data. The default is UTF-8.',
    )
    headerRows: Optional[int] = Field(
        None,
        description='Optional. The number of rows to interpret as header rows that should be skipped when reading data rows.',
    )


class GoogleCloudDataplexV1ZoneDiscoverySpecJsonOptions(BaseModel):
    disableTypeInference: Optional[bool] = Field(
        None,
        description='Optional. Whether to disable the inference of data type for Json data. If true, all columns will be registered as their primitive types (strings, number or boolean).',
    )
    encoding: Optional[str] = Field(
        None,
        description='Optional. The character encoding of the data. The default is UTF-8.',
    )


class LocationType(Enum):
    LOCATION_TYPE_UNSPECIFIED = 'LOCATION_TYPE_UNSPECIFIED'
    SINGLE_REGION = 'SINGLE_REGION'
    MULTI_REGION = 'MULTI_REGION'


class GoogleCloudDataplexV1ZoneResourceSpec(BaseModel):
    locationType: Optional[LocationType] = Field(
        None,
        description='Required. Immutable. The location type of the resources that are allowed to be attached to the assets within this zone.',
    )


class GoogleCloudLocationLocation(BaseModel):
    displayName: Optional[str] = Field(
        None,
        description='The friendly name for this location, typically a nearby city name. For example, "Tokyo".',
    )
    labels: Optional[Dict[str, str]] = Field(
        None,
        description='Cross-service attributes for the location. For example {"cloud.googleapis.com/region": "us-east1"} ',
    )
    locationId: Optional[str] = Field(
        None, description='The canonical id for this location. For example: "us-east1".'
    )
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description='Service-specific metadata. For example the available capacity at the given location.',
    )
    name: Optional[str] = Field(
        None,
        description='Resource name for the location, which may vary between implementations. For example: "projects/example-project/locations/us-east1"',
    )


class LogType(Enum):
    LOG_TYPE_UNSPECIFIED = 'LOG_TYPE_UNSPECIFIED'
    ADMIN_READ = 'ADMIN_READ'
    DATA_WRITE = 'DATA_WRITE'
    DATA_READ = 'DATA_READ'


class GoogleIamV1AuditLogConfig(BaseModel):
    exemptedMembers: Optional[List[str]] = Field(
        None,
        description='Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.',
    )
    logType: Optional[LogType] = Field(
        None, description='The log type that this config enables.'
    )


class GoogleIamV1TestIamPermissionsRequest(BaseModel):
    permissions: Optional[List[str]] = Field(
        None,
        description='The set of permissions to check for the resource. Permissions with wildcards (such as * or storage.*) are not allowed. For more information see IAM Overview (https://cloud.google.com/iam/docs/overview#permissions).',
    )


class GoogleIamV1TestIamPermissionsResponse(BaseModel):
    permissions: Optional[List[str]] = Field(
        None,
        description='A subset of TestPermissionsRequest.permissions that the caller is allowed.',
    )


class GoogleLongrunningCancelOperationRequest(BaseModel):
    pass


class GoogleRpcStatus(BaseModel):
    code: Optional[int] = Field(
        None,
        description='The status code, which should be an enum value of google.rpc.Code.',
    )
    details: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='A list of messages that carry the error details. There is a common set of message types for APIs to use.',
    )
    message: Optional[str] = Field(
        None,
        description='A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.',
    )


class GoogleTypeExpr(BaseModel):
    description: Optional[str] = Field(
        None,
        description='Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.',
    )
    expression: Optional[str] = Field(
        None,
        description='Textual representation of an expression in Common Expression Language syntax.',
    )
    location: Optional[str] = Field(
        None,
        description='Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.',
    )
    title: Optional[str] = Field(
        None,
        description='Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.',
    )


class FieldXgafv(Enum):
    field_1 = '1'
    field_2 = '2'


class Alt(Enum):
    json = 'json'
    media = 'media'
    proto = 'proto'


class View(Enum):
    ENTITY_VIEW_UNSPECIFIED = 'ENTITY_VIEW_UNSPECIFIED'
    BASIC = 'BASIC'
    SCHEMA = 'SCHEMA'
    FULL = 'FULL'


class View2(Enum):
    ENTITY_VIEW_UNSPECIFIED = 'ENTITY_VIEW_UNSPECIFIED'
    TABLES = 'TABLES'
    FILESETS = 'FILESETS'


class GoogleCloudDataplexV1Action(BaseModel):
    asset: Optional[str] = Field(
        None,
        description='Output only. The relative resource name of the asset, of the form: projects/{project_number}/locations/{location_id}/lakes/{lake_id}/zones/{zone_id}/assets/{asset_id}.',
    )
    category: Optional[Category] = Field(
        None, description='The category of issue associated with the action.'
    )
    dataLocations: Optional[List[str]] = Field(
        None,
        description='The list of data locations associated with this action. Cloud Storage locations are represented as URI paths(E.g. gs://bucket/table1/year=2020/month=Jan/). BigQuery locations refer to resource names(E.g. bigquery.googleapis.com/projects/project-id/datasets/dataset-id).',
    )
    detectTime: Optional[str] = Field(
        None, description='The time that the issue was detected.'
    )
    failedSecurityPolicyApply: Optional[
        GoogleCloudDataplexV1ActionFailedSecurityPolicyApply
    ] = Field(
        None, description='Details for issues related to applying security policy.'
    )
    incompatibleDataSchema: Optional[
        GoogleCloudDataplexV1ActionIncompatibleDataSchema
    ] = Field(
        None,
        description='Details for issues related to incompatible schemas detected within data.',
    )
    invalidDataFormat: Optional[GoogleCloudDataplexV1ActionInvalidDataFormat] = Field(
        None,
        description='Details for issues related to invalid or unsupported data formats.',
    )
    invalidDataOrganization: Optional[
        GoogleCloudDataplexV1ActionInvalidDataOrganization
    ] = Field(
        None, description='Details for issues related to invalid data arrangement.'
    )
    invalidDataPartition: Optional[GoogleCloudDataplexV1ActionInvalidDataPartition] = (
        Field(
            None,
            description='Details for issues related to invalid or unsupported data partition structure.',
        )
    )
    issue: Optional[str] = Field(
        None, description='Detailed description of the issue requiring action.'
    )
    lake: Optional[str] = Field(
        None,
        description='Output only. The relative resource name of the lake, of the form: projects/{project_number}/locations/{location_id}/lakes/{lake_id}.',
    )
    missingData: Optional[GoogleCloudDataplexV1ActionMissingData] = Field(
        None,
        description='Details for issues related to absence of data within managed resources.',
    )
    missingResource: Optional[GoogleCloudDataplexV1ActionMissingResource] = Field(
        None, description='Details for issues related to absence of a managed resource.'
    )
    name: Optional[str] = Field(
        None,
        description='Output only. The relative resource name of the action, of the form: projects/{project}/locations/{location}/lakes/{lake}/actions/{action} projects/{project}/locations/{location}/lakes/{lake}/zones/{zone}/actions/{action} projects/{project}/locations/{location}/lakes/{lake}/zones/{zone}/assets/{asset}/actions/{action}.',
    )
    unauthorizedResource: Optional[GoogleCloudDataplexV1ActionUnauthorizedResource] = (
        Field(
            None,
            description='Details for issues related to lack of permissions to access data resources.',
        )
    )
    zone: Optional[str] = Field(
        None,
        description='Output only. The relative resource name of the zone, of the form: projects/{project_number}/locations/{location_id}/lakes/{lake_id}/zones/{zone_id}.',
    )


class GoogleCloudDataplexV1AssetDiscoverySpec(BaseModel):
    csvOptions: Optional[GoogleCloudDataplexV1AssetDiscoverySpecCsvOptions] = Field(
        None, description='Optional. Configuration for CSV data.'
    )
    enabled: Optional[bool] = Field(
        None, description='Optional. Whether discovery is enabled.'
    )
    excludePatterns: Optional[List[str]] = Field(
        None,
        description='Optional. The list of patterns to apply for selecting data to exclude during discovery. For Cloud Storage bucket assets, these are interpreted as glob patterns used to match object names. For BigQuery dataset assets, these are interpreted as patterns to match table names.',
    )
    includePatterns: Optional[List[str]] = Field(
        None,
        description='Optional. The list of patterns to apply for selecting data to include during discovery if only a subset of the data should considered. For Cloud Storage bucket assets, these are interpreted as glob patterns used to match object names. For BigQuery dataset assets, these are interpreted as patterns to match table names.',
    )
    jsonOptions: Optional[GoogleCloudDataplexV1AssetDiscoverySpecJsonOptions] = Field(
        None, description='Optional. Configuration for Json data.'
    )
    schedule: Optional[str] = Field(
        None,
        description='Optional. Cron schedule (https://en.wikipedia.org/wiki/Cron) for running discovery periodically. Successive discovery runs must be scheduled at least 60 minutes apart. The default value is to run discovery every 60 minutes. To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: "CRON_TZ=${IANA_TIME_ZONE}" or TZ=${IANA_TIME_ZONE}". The ${IANA_TIME_ZONE} may only be a valid string from IANA time zone database. For example, CRON_TZ=America/New_York 1 * * * *, or TZ=America/New_York 1 * * * *.',
    )


class GoogleCloudDataplexV1AssetDiscoveryStatus(BaseModel):
    lastRunDuration: Optional[str] = Field(
        None, description='The duration of the last discovery run.'
    )
    lastRunTime: Optional[str] = Field(
        None, description='The start time of the last discovery run.'
    )
    message: Optional[str] = Field(
        None, description='Additional information about the current state.'
    )
    state: Optional[State1] = Field(
        None, description='The current status of the discovery feature.'
    )
    stats: Optional[GoogleCloudDataplexV1AssetDiscoveryStatusStats] = Field(
        None, description='Data Stats of the asset reported by discovery.'
    )
    updateTime: Optional[str] = Field(
        None, description='Last update time of the status.'
    )


class GoogleCloudDataplexV1Content(BaseModel):
    createTime: Optional[str] = Field(
        None, description='Output only. Content creation time.'
    )
    dataText: Optional[str] = Field(
        None, description='Required. Content data in string format.'
    )
    description: Optional[str] = Field(
        None, description='Optional. Description of the content.'
    )
    labels: Optional[Dict[str, str]] = Field(
        None, description='Optional. User defined labels for the content.'
    )
    name: Optional[str] = Field(
        None,
        description='Output only. The relative resource name of the content, of the form: projects/{project_id}/locations/{location_id}/lakes/{lake_id}/content/{content_id}',
    )
    notebook: Optional[GoogleCloudDataplexV1ContentNotebook] = Field(
        None, description='Notebook related configurations.'
    )
    path: Optional[str] = Field(
        None,
        description='Required. The path for the Content file, represented as directory structure. Unique within a lake. Limited to alphanumerics, hyphens, underscores, dots and slashes.',
    )
    sqlScript: Optional[GoogleCloudDataplexV1ContentSqlScript] = Field(
        None, description='Sql Script related configurations.'
    )
    uid: Optional[str] = Field(
        None,
        description='Output only. System generated globally unique ID for the content. This ID will be different if the content is deleted and re-created with the same name.',
    )
    updateTime: Optional[str] = Field(
        None, description='Output only. The time when the content was last updated.'
    )


class GoogleCloudDataplexV1DataAttribute(BaseModel):
    attributeCount: Optional[int] = Field(
        None,
        description='Output only. The number of child attributes present for this attribute.',
    )
    createTime: Optional[str] = Field(
        None, description='Output only. The time when the DataAttribute was created.'
    )
    dataAccessSpec: Optional[GoogleCloudDataplexV1DataAccessSpec] = Field(
        None,
        description='Optional. Specified when applied to data stored on the resource (eg: rows, columns in BigQuery Tables).',
    )
    description: Optional[str] = Field(
        None, description='Optional. Description of the DataAttribute.'
    )
    displayName: Optional[str] = Field(
        None, description='Optional. User friendly display name.'
    )
    etag: Optional[str] = Field(
        None,
        description='This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.',
    )
    labels: Optional[Dict[str, str]] = Field(
        None, description='Optional. User-defined labels for the DataAttribute.'
    )
    name: Optional[str] = Field(
        None,
        description='Output only. The relative resource name of the dataAttribute, of the form: projects/{project_number}/locations/{location_id}/dataTaxonomies/{dataTaxonomy}/attributes/{data_attribute_id}.',
    )
    parentId: Optional[str] = Field(
        None,
        description='Optional. The ID of the parent DataAttribute resource, should belong to the same data taxonomy. Circular dependency in parent chain is not valid. Maximum depth of the hierarchy allowed is 4. a -> b -> c -> d -> e, depth = 4',
    )
    resourceAccessSpec: Optional[GoogleCloudDataplexV1ResourceAccessSpec] = Field(
        None,
        description='Optional. Specified when applied to a resource (eg: Cloud Storage bucket, BigQuery dataset, BigQuery table).',
    )
    uid: Optional[str] = Field(
        None,
        description='Output only. System generated globally unique ID for the DataAttribute. This ID will be different if the DataAttribute is deleted and re-created with the same name.',
    )
    updateTime: Optional[str] = Field(
        None,
        description='Output only. The time when the DataAttribute was last updated.',
    )


class GoogleCloudDataplexV1DataAttributeBinding(BaseModel):
    attributes: Optional[List[str]] = Field(
        None,
        description='Optional. List of attributes to be associated with the resource, provided in the form: projects/{project}/locations/{location}/dataTaxonomies/{dataTaxonomy}/attributes/{data_attribute_id}',
    )
    createTime: Optional[str] = Field(
        None,
        description='Output only. The time when the DataAttributeBinding was created.',
    )
    description: Optional[str] = Field(
        None, description='Optional. Description of the DataAttributeBinding.'
    )
    displayName: Optional[str] = Field(
        None, description='Optional. User friendly display name.'
    )
    etag: Optional[str] = Field(
        None,
        description='This checksum is computed by the server based on the value of other fields, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding. Etags must be used when calling the DeleteDataAttributeBinding and the UpdateDataAttributeBinding method.',
    )
    labels: Optional[Dict[str, str]] = Field(
        None, description='Optional. User-defined labels for the DataAttributeBinding.'
    )
    name: Optional[str] = Field(
        None,
        description='Output only. The relative resource name of the Data Attribute Binding, of the form: projects/{project_number}/locations/{location}/dataAttributeBindings/{data_attribute_binding_id}',
    )
    paths: Optional[List[GoogleCloudDataplexV1DataAttributeBindingPath]] = Field(
        None,
        description='Optional. The list of paths for items within the associated resource (eg. columns and partitions within a table) along with attribute bindings.',
    )
    resource: Optional[str] = Field(
        None,
        description='Optional. Immutable. The resource name of the resource that is associated to attributes. Presently, only entity resource is supported in the form: projects/{project}/locations/{location}/lakes/{lake}/zones/{zone}/entities/{entity_id} Must belong in the same project and region as the attribute binding, and there can only exist one active binding for a resource.',
    )
    uid: Optional[str] = Field(
        None,
        description='Output only. System generated globally unique ID for the DataAttributeBinding. This ID will be different if the DataAttributeBinding is deleted and re-created with the same name.',
    )
    updateTime: Optional[str] = Field(
        None,
        description='Output only. The time when the DataAttributeBinding was last updated.',
    )


class GoogleCloudDataplexV1DataProfileResultProfileFieldProfileInfo(BaseModel):
    distinctRatio: Optional[float] = Field(
        None,
        description='Ratio of rows with distinct values against total scanned rows. Not available for complex non-groupable field type RECORD and fields with REPEATABLE mode.',
    )
    doubleProfile: Optional[
        GoogleCloudDataplexV1DataProfileResultProfileFieldProfileInfoDoubleFieldInfo
    ] = Field(None, description='Double type field information.')
    integerProfile: Optional[
        GoogleCloudDataplexV1DataProfileResultProfileFieldProfileInfoIntegerFieldInfo
    ] = Field(None, description='Integer type field information.')
    nullRatio: Optional[float] = Field(
        None, description='Ratio of rows with null value against total scanned rows.'
    )
    stringProfile: Optional[
        GoogleCloudDataplexV1DataProfileResultProfileFieldProfileInfoStringFieldInfo
    ] = Field(None, description='String type field information.')
    topNValues: Optional[
        List[GoogleCloudDataplexV1DataProfileResultProfileFieldProfileInfoTopNValue]
    ] = Field(
        None,
        description='The list of top N non-null values and number of times they occur in the scanned data. N is 10 or equal to the number of distinct values in the field, whichever is smaller. Not available for complex non-groupable field type RECORD and fields with REPEATABLE mode.',
    )


class GoogleCloudDataplexV1DataQualityRule(BaseModel):
    column: Optional[str] = Field(
        None,
        description='Optional. The unnested column which this rule is evaluated against.',
    )
    dimension: Optional[str] = Field(
        None,
        description='Required. The dimension a rule belongs to. Results are also aggregated at the dimension level. Supported dimensions are "COMPLETENESS", "ACCURACY", "CONSISTENCY", "VALIDITY", "UNIQUENESS", "INTEGRITY"',
    )
    ignoreNull: Optional[bool] = Field(
        None,
        description='Optional. Rows with null values will automatically fail a rule, unless ignore_null is true. In that case, such null rows are trivially considered passing.Only applicable to ColumnMap rules.',
    )
    nonNullExpectation: Optional[
        GoogleCloudDataplexV1DataQualityRuleNonNullExpectation
    ] = Field(
        None,
        description='ColumnMap rule which evaluates whether each column value is null.',
    )
    rangeExpectation: Optional[GoogleCloudDataplexV1DataQualityRuleRangeExpectation] = (
        Field(
            None,
            description='ColumnMap rule which evaluates whether each column value lies between a specified range.',
        )
    )
    regexExpectation: Optional[GoogleCloudDataplexV1DataQualityRuleRegexExpectation] = (
        Field(
            None,
            description='ColumnMap rule which evaluates whether each column value matches a specified regex.',
        )
    )
    rowConditionExpectation: Optional[
        GoogleCloudDataplexV1DataQualityRuleRowConditionExpectation
    ] = Field(
        None,
        description='Table rule which evaluates whether each row passes the specified condition.',
    )
    setExpectation: Optional[GoogleCloudDataplexV1DataQualityRuleSetExpectation] = (
        Field(
            None,
            description='ColumnMap rule which evaluates whether each column value is contained by a specified set.',
        )
    )
    statisticRangeExpectation: Optional[
        GoogleCloudDataplexV1DataQualityRuleStatisticRangeExpectation
    ] = Field(
        None,
        description='ColumnAggregate rule which evaluates whether the column aggregate statistic lies between a specified range.',
    )
    tableConditionExpectation: Optional[
        GoogleCloudDataplexV1DataQualityRuleTableConditionExpectation
    ] = Field(
        None,
        description='Table rule which evaluates whether the provided expression is true.',
    )
    threshold: Optional[float] = Field(
        None,
        description='Optional. The minimum ratio of passing_rows / total_rows required to pass this rule, with a range of 0.0, 1.0.0 indicates default value (i.e. 1.0).',
    )
    uniquenessExpectation: Optional[
        GoogleCloudDataplexV1DataQualityRuleUniquenessExpectation
    ] = Field(
        None,
        description='ColumnAggregate rule which evaluates whether the column has duplicates.',
    )


class GoogleCloudDataplexV1DataQualityRuleResult(BaseModel):
    evaluatedCount: Optional[str] = Field(
        None,
        description='The number of rows a rule was evaluated against. This field is only valid for ColumnMap type rules.Evaluated count can be configured to either include all rows (default) - with null rows automatically failing rule evaluation, or exclude null rows from the evaluated_count, by setting ignore_nulls = true.',
    )
    failingRowsQuery: Optional[str] = Field(
        None,
        description='The query to find rows that did not pass this rule. Only applies to ColumnMap and RowCondition rules.',
    )
    nullCount: Optional[str] = Field(
        None, description='The number of rows with null values in the specified column.'
    )
    passRatio: Optional[float] = Field(
        None,
        description='The ratio of passed_count / evaluated_count. This field is only valid for ColumnMap type rules.',
    )
    passed: Optional[bool] = Field(
        None, description='Whether the rule passed or failed.'
    )
    passedCount: Optional[str] = Field(
        None,
        description='The number of rows which passed a rule evaluation. This field is only valid for ColumnMap type rules.',
    )
    rule: Optional[GoogleCloudDataplexV1DataQualityRule] = Field(
        None, description='The rule specified in the DataQualitySpec, as is.'
    )


class GoogleCloudDataplexV1DataQualitySpec(BaseModel):
    rules: Optional[List[GoogleCloudDataplexV1DataQualityRule]] = Field(
        None,
        description='The list of rules to evaluate against a data source. At least one rule is required.',
    )


class GoogleCloudDataplexV1DataScanEvent(BaseModel):
    dataProfile: Optional[GoogleCloudDataplexV1DataScanEventDataProfileResult] = Field(
        None, description='Data profile result for data profile type data scan.'
    )
    dataQuality: Optional[GoogleCloudDataplexV1DataScanEventDataQualityResult] = Field(
        None, description='Data quality result for data quality type data scan.'
    )
    dataSource: Optional[str] = Field(
        None, description='The data source of the data scan'
    )
    endTime: Optional[str] = Field(
        None, description='The time when the data scan job finished.'
    )
    jobId: Optional[str] = Field(
        None,
        description='The identifier of the specific data scan job this log entry is for.',
    )
    message: Optional[str] = Field(
        None, description='The message describing the data scan job event.'
    )
    scope: Optional[Scope] = Field(
        None, description='The scope of the data scan (e.g. full, incremental).'
    )
    specVersion: Optional[str] = Field(
        None,
        description='A version identifier of the spec which was used to execute this job.',
    )
    startTime: Optional[str] = Field(
        None, description='The time when the data scan job started to run.'
    )
    state: Optional[State5] = Field(
        None, description='The status of the data scan job.'
    )
    trigger: Optional[Trigger] = Field(
        None, description='The trigger type of the data scan job.'
    )
    type: Optional[Type2] = Field(None, description='The type of the data scan.')


class GoogleCloudDataplexV1DiscoveryEvent(BaseModel):
    action: Optional[GoogleCloudDataplexV1DiscoveryEventActionDetails] = Field(
        None, description='Details about the action associated with the event.'
    )
    assetId: Optional[str] = Field(None, description='The id of the associated asset.')
    config: Optional[GoogleCloudDataplexV1DiscoveryEventConfigDetails] = Field(
        None, description='Details about discovery configuration in effect.'
    )
    dataLocation: Optional[str] = Field(
        None, description='The data location associated with the event.'
    )
    entity: Optional[GoogleCloudDataplexV1DiscoveryEventEntityDetails] = Field(
        None, description='Details about the entity associated with the event.'
    )
    lakeId: Optional[str] = Field(None, description='The id of the associated lake.')
    message: Optional[str] = Field(None, description='The log message.')
    partition: Optional[GoogleCloudDataplexV1DiscoveryEventPartitionDetails] = Field(
        None, description='Details about the partition associated with the event.'
    )
    type: Optional[Type4] = Field(
        None, description='The type of the event being logged.'
    )
    zoneId: Optional[str] = Field(None, description='The id of the associated zone.')


class GoogleCloudDataplexV1EntityCompatibilityStatus(BaseModel):
    bigquery: Optional[GoogleCloudDataplexV1EntityCompatibilityStatusCompatibility] = (
        Field(
            None,
            description='Output only. Whether this entity is compatible with BigQuery.',
        )
    )
    hiveMetastore: Optional[
        GoogleCloudDataplexV1EntityCompatibilityStatusCompatibility
    ] = Field(
        None,
        description='Output only. Whether this entity is compatible with Hive Metastore.',
    )


class GoogleCloudDataplexV1EnvironmentInfrastructureSpec(BaseModel):
    compute: Optional[
        GoogleCloudDataplexV1EnvironmentInfrastructureSpecComputeResources
    ] = Field(
        None,
        description='Optional. Compute resources needed for analyze interactive workloads.',
    )
    osImage: Optional[
        GoogleCloudDataplexV1EnvironmentInfrastructureSpecOsImageRuntime
    ] = Field(
        None,
        description='Required. Software Runtime Configuration for analyze interactive workloads.',
    )


class GoogleCloudDataplexV1Lake(BaseModel):
    assetStatus: Optional[GoogleCloudDataplexV1AssetStatus] = Field(
        None,
        description='Output only. Aggregated status of the underlying assets of the lake.',
    )
    createTime: Optional[str] = Field(
        None, description='Output only. The time when the lake was created.'
    )
    description: Optional[str] = Field(
        None, description='Optional. Description of the lake.'
    )
    displayName: Optional[str] = Field(
        None, description='Optional. User friendly display name.'
    )
    labels: Optional[Dict[str, str]] = Field(
        None, description='Optional. User-defined labels for the lake.'
    )
    metastore: Optional[GoogleCloudDataplexV1LakeMetastore] = Field(
        None,
        description='Optional. Settings to manage lake and Dataproc Metastore service instance association.',
    )
    metastoreStatus: Optional[GoogleCloudDataplexV1LakeMetastoreStatus] = Field(
        None, description='Output only. Metastore status of the lake.'
    )
    name: Optional[str] = Field(
        None,
        description='Output only. The relative resource name of the lake, of the form: projects/{project_number}/locations/{location_id}/lakes/{lake_id}.',
    )
    serviceAccount: Optional[str] = Field(
        None,
        description='Output only. Service account associated with this lake. This service account must be authorized to access or operate on resources managed by the lake.',
    )
    state: Optional[State10] = Field(
        None, description='Output only. Current state of the lake.'
    )
    uid: Optional[str] = Field(
        None,
        description='Output only. System generated globally unique ID for the lake. This ID will be different if the lake is deleted and re-created with the same name.',
    )
    updateTime: Optional[str] = Field(
        None, description='Output only. The time when the lake was last updated.'
    )


class GoogleCloudDataplexV1ListActionsResponse(BaseModel):
    actions: Optional[List[GoogleCloudDataplexV1Action]] = Field(
        None, description='Actions under the given parent lake/zone/asset.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='Token to retrieve the next page of results, or empty if there are no more results in the list.',
    )


class GoogleCloudDataplexV1ListContentResponse(BaseModel):
    content: Optional[List[GoogleCloudDataplexV1Content]] = Field(
        None, description='Content under the given parent lake.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='Token to retrieve the next page of results, or empty if there are no more results in the list.',
    )


class GoogleCloudDataplexV1ListDataAttributeBindingsResponse(BaseModel):
    dataAttributeBindings: Optional[List[GoogleCloudDataplexV1DataAttributeBinding]] = (
        Field(
            None, description='DataAttributeBindings under the given parent Location.'
        )
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='Token to retrieve the next page of results, or empty if there are no more results in the list.',
    )
    unreachableLocations: Optional[List[str]] = Field(
        None, description='Locations that could not be reached.'
    )


class GoogleCloudDataplexV1ListDataAttributesResponse(BaseModel):
    dataAttributes: Optional[List[GoogleCloudDataplexV1DataAttribute]] = Field(
        None, description='DataAttributes under the given parent DataTaxonomy.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='Token to retrieve the next page of results, or empty if there are no more results in the list.',
    )
    unreachableLocations: Optional[List[str]] = Field(
        None, description='Locations that could not be reached.'
    )


class GoogleCloudDataplexV1ListLakesResponse(BaseModel):
    lakes: Optional[List[GoogleCloudDataplexV1Lake]] = Field(
        None, description='Lakes under the given parent location.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='Token to retrieve the next page of results, or empty if there are no more results in the list.',
    )
    unreachableLocations: Optional[List[str]] = Field(
        None, description='Locations that could not be reached.'
    )


class GoogleCloudDataplexV1ListPartitionsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='Token to retrieve the next page of results, or empty if there are no remaining results in the list.',
    )
    partitions: Optional[List[GoogleCloudDataplexV1Partition]] = Field(
        None, description='Partitions under the specified parent entity.'
    )


class GoogleCloudDataplexV1ListSessionsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='Token to retrieve the next page of results, or empty if there are no more results in the list.',
    )
    sessions: Optional[List[GoogleCloudDataplexV1Session]] = Field(
        None, description='Sessions under a given environment.'
    )


class GoogleCloudDataplexV1ScannedData(BaseModel):
    incrementalField: Optional[GoogleCloudDataplexV1ScannedDataIncrementalField] = (
        Field(None, description='The range denoted by values of an incremental field')
    )


class GoogleCloudDataplexV1Schema(BaseModel):
    fields: Optional[List[GoogleCloudDataplexV1SchemaSchemaField]] = Field(
        None,
        description='Optional. The sequence of fields describing data in table entities. Note: BigQuery SchemaFields are immutable.',
    )
    partitionFields: Optional[List[GoogleCloudDataplexV1SchemaPartitionField]] = Field(
        None,
        description='Optional. The sequence of fields describing the partition structure in entities. If this field is empty, there are no partitions within the data.',
    )
    partitionStyle: Optional[PartitionStyle] = Field(
        None,
        description='Optional. The structure of paths containing partition data within the entity.',
    )
    userManaged: Optional[bool] = Field(
        None,
        description='Required. Set to true if user-managed or false if managed by Dataplex. The default is false (managed by Dataplex). Set to falseto enable Dataplex discovery to update the schema. including new data discovery, schema inference, and schema evolution. Users retain the ability to input and edit the schema. Dataplex treats schema input by the user as though produced by a previous Dataplex discovery operation, and it will evolve the schema and take action based on that treatment. Set to true to fully manage the entity schema. This setting guarantees that Dataplex will not change schema fields.',
    )


class GoogleCloudDataplexV1SessionEvent(BaseModel):
    eventSucceeded: Optional[bool] = Field(None, description='The status of the event.')
    fastStartupEnabled: Optional[bool] = Field(
        None,
        description='If the session is associated with an environment with fast startup enabled, and was created before being assigned to a user.',
    )
    message: Optional[str] = Field(None, description='The log message.')
    query: Optional[GoogleCloudDataplexV1SessionEventQueryDetail] = Field(
        None, description='The execution details of the query.'
    )
    sessionId: Optional[str] = Field(
        None, description='Unique identifier for the session.'
    )
    type: Optional[Type11] = Field(None, description='The type of the event.')
    unassignedDuration: Optional[str] = Field(
        None,
        description='The idle duration of a warm pooled session before it is assigned to user.',
    )
    userId: Optional[str] = Field(
        None,
        description='The information about the user that created the session. It will be the email address of the user.',
    )


class GoogleCloudDataplexV1StorageFormat(BaseModel):
    compressionFormat: Optional[CompressionFormat] = Field(
        None,
        description='Optional. The compression type associated with the stored data. If unspecified, the data is uncompressed.',
    )
    csv: Optional[GoogleCloudDataplexV1StorageFormatCsvOptions] = Field(
        None, description='Optional. Additional information about CSV formatted data.'
    )
    format: Optional[Format] = Field(
        None,
        description='Output only. The data format associated with the stored data, which represents content type values. The value is inferred from mime type.',
    )
    iceberg: Optional[GoogleCloudDataplexV1StorageFormatIcebergOptions] = Field(
        None, description='Optional. Additional information about iceberg tables.'
    )
    json_: Optional[GoogleCloudDataplexV1StorageFormatJsonOptions] = Field(
        None,
        alias='json',
        description='Optional. Additional information about CSV formatted data.',
    )
    mimeType: Optional[str] = Field(
        None,
        description='Required. The mime type descriptor for the data. Must match the pattern {type}/{subtype}. Supported values: application/x-parquet application/x-avro application/x-orc application/x-tfrecord application/x-parquet+iceberg application/x-avro+iceberg application/x-orc+iceberg application/json application/{subtypes} text/csv text/ image/{image subtype} video/{video subtype} audio/{audio subtype}',
    )


class GoogleCloudDataplexV1TaskInfrastructureSpec(BaseModel):
    batch: Optional[
        GoogleCloudDataplexV1TaskInfrastructureSpecBatchComputeResources
    ] = Field(
        None,
        description='Compute resources needed for a Task when using Dataproc Serverless.',
    )
    containerImage: Optional[
        GoogleCloudDataplexV1TaskInfrastructureSpecContainerImageRuntime
    ] = Field(None, description='Container Image Runtime Configuration.')
    vpcNetwork: Optional[GoogleCloudDataplexV1TaskInfrastructureSpecVpcNetwork] = Field(
        None, description='Vpc network.'
    )


class GoogleCloudDataplexV1TaskNotebookTaskConfig(BaseModel):
    archiveUris: Optional[List[str]] = Field(
        None,
        description='Optional. Cloud Storage URIs of archives to be extracted into the working directory of each executor. Supported file types: .jar, .tar, .tar.gz, .tgz, and .zip.',
    )
    fileUris: Optional[List[str]] = Field(
        None,
        description='Optional. Cloud Storage URIs of files to be placed in the working directory of each executor.',
    )
    infrastructureSpec: Optional[GoogleCloudDataplexV1TaskInfrastructureSpec] = Field(
        None, description='Optional. Infrastructure specification for the execution.'
    )
    notebook: Optional[str] = Field(
        None,
        description='Required. Path to input notebook. This can be the Cloud Storage URI of the notebook file or the path to a Notebook Content. The execution args are accessible as environment variables (TASK_key=value).',
    )


class GoogleCloudDataplexV1TaskSparkTaskConfig(BaseModel):
    archiveUris: Optional[List[str]] = Field(
        None,
        description='Optional. Cloud Storage URIs of archives to be extracted into the working directory of each executor. Supported file types: .jar, .tar, .tar.gz, .tgz, and .zip.',
    )
    fileUris: Optional[List[str]] = Field(
        None,
        description='Optional. Cloud Storage URIs of files to be placed in the working directory of each executor.',
    )
    infrastructureSpec: Optional[GoogleCloudDataplexV1TaskInfrastructureSpec] = Field(
        None, description='Optional. Infrastructure specification for the execution.'
    )
    mainClass: Optional[str] = Field(
        None,
        description="The name of the driver's main class. The jar file that contains the class must be in the default CLASSPATH or specified in jar_file_uris. The execution args are passed in as a sequence of named process arguments (--key=value).",
    )
    mainJarFileUri: Optional[str] = Field(
        None,
        description='The Cloud Storage URI of the jar file that contains the main class. The execution args are passed in as a sequence of named process arguments (--key=value).',
    )
    pythonScriptFile: Optional[str] = Field(
        None,
        description='The Gcloud Storage URI of the main Python file to use as the driver. Must be a .py file. The execution args are passed in as a sequence of named process arguments (--key=value).',
    )
    sqlScript: Optional[str] = Field(
        None,
        description='The query text. The execution args are used to declare a set of script variables (set key="value";).',
    )
    sqlScriptFile: Optional[str] = Field(
        None,
        description='A reference to a query file. This can be the Cloud Storage URI of the query file or it can the path to a SqlScript Content. The execution args are used to declare a set of script variables (set key="value";).',
    )


class GoogleCloudDataplexV1Trigger(BaseModel):
    onDemand: Optional[GoogleCloudDataplexV1TriggerOnDemand] = Field(
        None, description='The scan runs once via RunDataScan API.'
    )
    schedule: Optional[GoogleCloudDataplexV1TriggerSchedule] = Field(
        None, description='The scan is scheduled to run periodically.'
    )


class GoogleCloudDataplexV1ZoneDiscoverySpec(BaseModel):
    csvOptions: Optional[GoogleCloudDataplexV1ZoneDiscoverySpecCsvOptions] = Field(
        None, description='Optional. Configuration for CSV data.'
    )
    enabled: Optional[bool] = Field(
        None, description='Required. Whether discovery is enabled.'
    )
    excludePatterns: Optional[List[str]] = Field(
        None,
        description='Optional. The list of patterns to apply for selecting data to exclude during discovery. For Cloud Storage bucket assets, these are interpreted as glob patterns used to match object names. For BigQuery dataset assets, these are interpreted as patterns to match table names.',
    )
    includePatterns: Optional[List[str]] = Field(
        None,
        description='Optional. The list of patterns to apply for selecting data to include during discovery if only a subset of the data should considered. For Cloud Storage bucket assets, these are interpreted as glob patterns used to match object names. For BigQuery dataset assets, these are interpreted as patterns to match table names.',
    )
    jsonOptions: Optional[GoogleCloudDataplexV1ZoneDiscoverySpecJsonOptions] = Field(
        None, description='Optional. Configuration for Json data.'
    )
    schedule: Optional[str] = Field(
        None,
        description='Optional. Cron schedule (https://en.wikipedia.org/wiki/Cron) for running discovery periodically. Successive discovery runs must be scheduled at least 60 minutes apart. The default value is to run discovery every 60 minutes. To explicitly set a timezone to the cron tab, apply a prefix in the cron tab: "CRON_TZ=${IANA_TIME_ZONE}" or TZ=${IANA_TIME_ZONE}". The ${IANA_TIME_ZONE} may only be a valid string from IANA time zone database. For example, CRON_TZ=America/New_York 1 * * * *, or TZ=America/New_York 1 * * * *.',
    )


class GoogleCloudLocationListLocationsResponse(BaseModel):
    locations: Optional[List[GoogleCloudLocationLocation]] = Field(
        None,
        description='A list of locations that matches the specified filter in the request.',
    )
    nextPageToken: Optional[str] = Field(
        None, description='The standard List next-page token.'
    )


class GoogleIamV1AuditConfig(BaseModel):
    auditLogConfigs: Optional[List[GoogleIamV1AuditLogConfig]] = Field(
        None, description='The configuration for logging of each type of permission.'
    )
    service: Optional[str] = Field(
        None,
        description='Specifies a service that will be enabled for audit logging. For example, storage.googleapis.com, cloudsql.googleapis.com. allServices is a special value that covers all services.',
    )


class GoogleIamV1Binding(BaseModel):
    condition: Optional[GoogleTypeExpr] = Field(
        None,
        description='The condition that is associated with this binding.If the condition evaluates to true, then this binding applies to the current request.If the condition evaluates to false, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding.To learn which resources support conditions in their IAM policies, see the IAM documentation (https://cloud.google.com/iam/help/conditions/resource-policies).',
    )
    members: Optional[List[str]] = Field(
        None,
        description='Specifies the principals requesting access for a Google Cloud resource. members can have the following values: allUsers: A special identifier that represents anyone who is on the internet; with or without a Google account. allAuthenticatedUsers: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. user:{emailid}: An email address that represents a specific Google account. For example, alice@example.com . serviceAccount:{emailid}: An email address that represents a Google service account. For example, my-other-app@appspot.gserviceaccount.com. serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]: An identifier for a Kubernetes service account (https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, my-project.svc.id.goog[my-namespace/my-kubernetes-sa]. group:{emailid}: An email address that represents a Google group. For example, admins@example.com. domain:{domain}: The G Suite domain (primary) that represents all the users of that domain. For example, google.com or example.com. deleted:user:{emailid}?uid={uniqueid}: An email address (plus unique identifier) representing a user that has been recently deleted. For example, alice@example.com?uid=123456789012345678901. If the user is recovered, this value reverts to user:{emailid} and the recovered user retains the role in the binding. deleted:serviceAccount:{emailid}?uid={uniqueid}: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901. If the service account is undeleted, this value reverts to serviceAccount:{emailid} and the undeleted service account retains the role in the binding. deleted:group:{emailid}?uid={uniqueid}: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, admins@example.com?uid=123456789012345678901. If the group is recovered, this value reverts to group:{emailid} and the recovered group retains the role in the binding.',
    )
    role: Optional[str] = Field(
        None,
        description='Role that is assigned to the list of members, or principals. For example, roles/viewer, roles/editor, or roles/owner.',
    )


class GoogleIamV1Policy(BaseModel):
    auditConfigs: Optional[List[GoogleIamV1AuditConfig]] = Field(
        None, description='Specifies cloud audit logging configuration for this policy.'
    )
    bindings: Optional[List[GoogleIamV1Binding]] = Field(
        None,
        description='Associates a list of members, or principals, with a role. Optionally, may specify a condition that determines how and when the bindings are applied. Each of the bindings must contain at least one principal.The bindings in a Policy can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the bindings grant 50 different roles to user:alice@example.com, and not to any other principal, then you can add another 1,450 principals to the bindings in the Policy.',
    )
    etag: Optional[str] = Field(
        None,
        description='etag is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the etag in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An etag is returned in the response to getIamPolicy, and systems are expected to put that etag in the request to setIamPolicy to ensure that their change will be applied to the same version of the policy.Important: If you use IAM Conditions, you must include the etag field whenever you call setIamPolicy. If you omit this field, then IAM allows you to overwrite a version 3 policy with a version 1 policy, and all of the conditions in the version 3 policy are lost.',
    )
    version: Optional[int] = Field(
        None,
        description='Specifies the format of the policy.Valid values are 0, 1, and 3. Requests that specify an invalid value are rejected.Any operation that affects conditional role bindings must specify version 3. This requirement applies to the following operations: Getting a policy that includes a conditional role binding Adding a conditional role binding to a policy Changing a conditional role binding in a policy Removing any role binding, with or without a condition, from a policy that includes conditionsImportant: If you use IAM Conditions, you must include the etag field whenever you call setIamPolicy. If you omit this field, then IAM allows you to overwrite a version 3 policy with a version 1 policy, and all of the conditions in the version 3 policy are lost.If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset.To learn which resources support conditions in their IAM policies, see the IAM documentation (https://cloud.google.com/iam/help/conditions/resource-policies).',
    )


class GoogleIamV1SetIamPolicyRequest(BaseModel):
    policy: Optional[GoogleIamV1Policy] = Field(
        None,
        description='REQUIRED: The complete policy to be applied to the resource. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Google Cloud services (such as Projects) might reject them.',
    )
    updateMask: Optional[str] = Field(
        None,
        description='OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used:paths: "bindings, etag"',
    )


class GoogleLongrunningOperation(BaseModel):
    done: Optional[bool] = Field(
        None,
        description='If the value is false, it means the operation is still in progress. If true, the operation is completed, and either error or response is available.',
    )
    error: Optional[GoogleRpcStatus] = Field(
        None,
        description='The error result of the operation in case of failure or cancellation.',
    )
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description='Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.',
    )
    name: Optional[str] = Field(
        None,
        description='The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the name should be a resource name ending with operations/{unique_id}.',
    )
    response: Optional[Dict[str, Any]] = Field(
        None,
        description='The normal response of the operation in case of success. If the original method returns no data on success, such as Delete, the response is google.protobuf.Empty. If the original method is standard Get/Create/Update, the response should be the resource. For other methods, the response should have the type XxxResponse, where Xxx is the original method name. For example, if the original method name is TakeSnapshot(), the inferred response type is TakeSnapshotResponse.',
    )


class GoogleCloudDataplexV1Asset(BaseModel):
    createTime: Optional[str] = Field(
        None, description='Output only. The time when the asset was created.'
    )
    description: Optional[str] = Field(
        None, description='Optional. Description of the asset.'
    )
    discoverySpec: Optional[GoogleCloudDataplexV1AssetDiscoverySpec] = Field(
        None,
        description='Optional. Specification of the discovery feature applied to data referenced by this asset. When this spec is left unset, the asset will use the spec set on the parent zone.',
    )
    discoveryStatus: Optional[GoogleCloudDataplexV1AssetDiscoveryStatus] = Field(
        None,
        description='Output only. Status of the discovery feature applied to data referenced by this asset.',
    )
    displayName: Optional[str] = Field(
        None, description='Optional. User friendly display name.'
    )
    labels: Optional[Dict[str, str]] = Field(
        None, description='Optional. User defined labels for the asset.'
    )
    name: Optional[str] = Field(
        None,
        description='Output only. The relative resource name of the asset, of the form: projects/{project_number}/locations/{location_id}/lakes/{lake_id}/zones/{zone_id}/assets/{asset_id}.',
    )
    resourceSpec: Optional[GoogleCloudDataplexV1AssetResourceSpec] = Field(
        None,
        description='Required. Specification of the resource that is referenced by this asset.',
    )
    resourceStatus: Optional[GoogleCloudDataplexV1AssetResourceStatus] = Field(
        None,
        description='Output only. Status of the resource referenced by this asset.',
    )
    securityStatus: Optional[GoogleCloudDataplexV1AssetSecurityStatus] = Field(
        None,
        description='Output only. Status of the security policy applied to resource referenced by this asset.',
    )
    state: Optional[State] = Field(
        None, description='Output only. Current state of the asset.'
    )
    uid: Optional[str] = Field(
        None,
        description='Output only. System generated globally unique ID for the asset. This ID will be different if the asset is deleted and re-created with the same name.',
    )
    updateTime: Optional[str] = Field(
        None, description='Output only. The time when the asset was last updated.'
    )


class GoogleCloudDataplexV1DataProfileResultProfileField(BaseModel):
    mode: Optional[str] = Field(
        None,
        description='The mode of the field. Possible values include: REQUIRED, if it is a required field. NULLABLE, if it is an optional field. REPEATED, if it is a repeated field.',
    )
    name: Optional[str] = Field(None, description='The name of the field.')
    profile: Optional[GoogleCloudDataplexV1DataProfileResultProfileFieldProfileInfo] = (
        Field(None, description='Profile information for the corresponding field.')
    )
    type: Optional[str] = Field(
        None,
        description='The data type retrieved from the schema of the data source. For instance, for a BigQuery native table, it is the BigQuery Table Schema (https://cloud.google.com/bigquery/docs/reference/rest/v2/tables#tablefieldschema). For a Dataplex Entity, it is the Entity Schema (https://cloud.google.com/dataplex/docs/reference/rpc/google.cloud.dataplex.v1#type_3).',
    )


class GoogleCloudDataplexV1DataQualityResult(BaseModel):
    dimensions: Optional[List[GoogleCloudDataplexV1DataQualityDimensionResult]] = Field(
        None, description='A list of results at the dimension level.'
    )
    passed: Optional[bool] = Field(
        None, description='Overall data quality result -- true if all rules passed.'
    )
    rowCount: Optional[str] = Field(None, description='The count of rows processed.')
    rules: Optional[List[GoogleCloudDataplexV1DataQualityRuleResult]] = Field(
        None, description='A list of all the rules in a job, and their results.'
    )
    scannedData: Optional[GoogleCloudDataplexV1ScannedData] = Field(
        None, description='The data scanned for this result.'
    )


class GoogleCloudDataplexV1DataScanExecutionSpec(BaseModel):
    field: Optional[str] = Field(
        None,
        description='Immutable. The unnested field (of type Date or Timestamp) that contains values which monotonically increase over time.If not specified, a data scan will run for all data in the table.',
    )
    trigger: Optional[GoogleCloudDataplexV1Trigger] = Field(
        None,
        description='Optional. Spec related to how often and when a scan should be triggered.If not specified, the default is OnDemand, which means the scan will not run until the user calls RunDataScan API.',
    )


class GoogleCloudDataplexV1Entity(BaseModel):
    access: Optional[GoogleCloudDataplexV1StorageAccess] = Field(
        None,
        description='Output only. Identifies the access mechanism to the entity. Not user settable.',
    )
    asset: Optional[str] = Field(
        None,
        description='Required. Immutable. The ID of the asset associated with the storage location containing the entity data. The entity must be with in the same zone with the asset.',
    )
    catalogEntry: Optional[str] = Field(
        None, description='Output only. The name of the associated Data Catalog entry.'
    )
    compatibility: Optional[GoogleCloudDataplexV1EntityCompatibilityStatus] = Field(
        None,
        description='Output only. Metadata stores that the entity is compatible with.',
    )
    createTime: Optional[str] = Field(
        None, description='Output only. The time when the entity was created.'
    )
    dataPath: Optional[str] = Field(
        None,
        description='Required. Immutable. The storage path of the entity data. For Cloud Storage data, this is the fully-qualified path to the entity, such as gs://bucket/path/to/data. For BigQuery data, this is the name of the table resource, such as projects/project_id/datasets/dataset_id/tables/table_id.',
    )
    dataPathPattern: Optional[str] = Field(
        None,
        description='Optional. The set of items within the data path constituting the data in the entity, represented as a glob path. Example: gs://bucket/path/to/data/**/*.csv.',
    )
    description: Optional[str] = Field(
        None,
        description='Optional. User friendly longer description text. Must be shorter than or equal to 1024 characters.',
    )
    displayName: Optional[str] = Field(
        None,
        description='Optional. Display name must be shorter than or equal to 256 characters.',
    )
    etag: Optional[str] = Field(
        None,
        description='Optional. The etag associated with the entity, which can be retrieved with a GetEntity request. Required for update and delete requests.',
    )
    format: Optional[GoogleCloudDataplexV1StorageFormat] = Field(
        None,
        description='Required. Identifies the storage format of the entity data. It does not apply to entities with data stored in BigQuery.',
    )
    id: Optional[str] = Field(
        None,
        description='Required. A user-provided entity ID. It is mutable, and will be used as the published table name. Specifying a new ID in an update entity request will override the existing value. The ID must contain only letters (a-z, A-Z), numbers (0-9), and underscores, and consist of 256 or fewer characters.',
    )
    name: Optional[str] = Field(
        None,
        description='Output only. The resource name of the entity, of the form: projects/{project_number}/locations/{location_id}/lakes/{lake_id}/zones/{zone_id}/entities/{id}.',
    )
    schema_: Optional[GoogleCloudDataplexV1Schema] = Field(
        None,
        alias='schema',
        description='Required. The description of the data structure and layout. The schema is not included in list responses. It is only included in SCHEMA and FULL entity views of a GetEntity response.',
    )
    system: Optional[System] = Field(
        None,
        description='Required. Immutable. Identifies the storage system of the entity data.',
    )
    type: Optional[Type7] = Field(
        None, description='Required. Immutable. The type of entity.'
    )
    uid: Optional[str] = Field(
        None,
        description='Output only. System generated unique ID for the Entity. This ID will be different if the Entity is deleted and re-created with the same name.',
    )
    updateTime: Optional[str] = Field(
        None, description='Output only. The time when the entity was last updated.'
    )


class GoogleCloudDataplexV1Environment(BaseModel):
    createTime: Optional[str] = Field(
        None, description='Output only. Environment creation time.'
    )
    description: Optional[str] = Field(
        None, description='Optional. Description of the environment.'
    )
    displayName: Optional[str] = Field(
        None, description='Optional. User friendly display name.'
    )
    endpoints: Optional[GoogleCloudDataplexV1EnvironmentEndpoints] = Field(
        None,
        description='Output only. URI Endpoints to access sessions associated with the Environment.',
    )
    infrastructureSpec: Optional[GoogleCloudDataplexV1EnvironmentInfrastructureSpec] = (
        Field(
            None,
            description='Required. Infrastructure specification for the Environment.',
        )
    )
    labels: Optional[Dict[str, str]] = Field(
        None, description='Optional. User defined labels for the environment.'
    )
    name: Optional[str] = Field(
        None,
        description='Output only. The relative resource name of the environment, of the form: projects/{project_id}/locations/{location_id}/lakes/{lake_id}/environment/{environment_id}',
    )
    sessionSpec: Optional[GoogleCloudDataplexV1EnvironmentSessionSpec] = Field(
        None,
        description='Optional. Configuration for sessions created for this environment.',
    )
    sessionStatus: Optional[GoogleCloudDataplexV1EnvironmentSessionStatus] = Field(
        None,
        description='Output only. Status of sessions created for this environment.',
    )
    state: Optional[State7] = Field(
        None, description='Output only. Current state of the environment.'
    )
    uid: Optional[str] = Field(
        None,
        description='Output only. System generated globally unique ID for the environment. This ID will be different if the environment is deleted and re-created with the same name.',
    )
    updateTime: Optional[str] = Field(
        None, description='Output only. The time when the environment was last updated.'
    )


class GoogleCloudDataplexV1ListAssetsResponse(BaseModel):
    assets: Optional[List[GoogleCloudDataplexV1Asset]] = Field(
        None, description='Asset under the given parent zone.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='Token to retrieve the next page of results, or empty if there are no more results in the list.',
    )


class GoogleCloudDataplexV1ListEntitiesResponse(BaseModel):
    entities: Optional[List[GoogleCloudDataplexV1Entity]] = Field(
        None, description='Entities in the specified parent zone.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='Token to retrieve the next page of results, or empty if there are no remaining results in the list.',
    )


class GoogleCloudDataplexV1ListEnvironmentsResponse(BaseModel):
    environments: Optional[List[GoogleCloudDataplexV1Environment]] = Field(
        None, description='Environments under the given parent lake.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='Token to retrieve the next page of results, or empty if there are no more results in the list.',
    )


class GoogleCloudDataplexV1Task(BaseModel):
    createTime: Optional[str] = Field(
        None, description='Output only. The time when the task was created.'
    )
    description: Optional[str] = Field(
        None, description='Optional. Description of the task.'
    )
    displayName: Optional[str] = Field(
        None, description='Optional. User friendly display name.'
    )
    executionSpec: Optional[GoogleCloudDataplexV1TaskExecutionSpec] = Field(
        None, description='Required. Spec related to how a task is executed.'
    )
    executionStatus: Optional[GoogleCloudDataplexV1TaskExecutionStatus] = Field(
        None, description='Output only. Status of the latest task executions.'
    )
    labels: Optional[Dict[str, str]] = Field(
        None, description='Optional. User-defined labels for the task.'
    )
    name: Optional[str] = Field(
        None,
        description='Output only. The relative resource name of the task, of the form: projects/{project_number}/locations/{location_id}/lakes/{lake_id}/ tasks/{task_id}.',
    )
    notebook: Optional[GoogleCloudDataplexV1TaskNotebookTaskConfig] = Field(
        None, description='Config related to running scheduled Notebooks.'
    )
    spark: Optional[GoogleCloudDataplexV1TaskSparkTaskConfig] = Field(
        None, description='Config related to running custom Spark tasks.'
    )
    state: Optional[State12] = Field(
        None, description='Output only. Current state of the task.'
    )
    triggerSpec: Optional[GoogleCloudDataplexV1TaskTriggerSpec] = Field(
        None,
        description='Required. Spec related to how often and when a task should be triggered.',
    )
    uid: Optional[str] = Field(
        None,
        description='Output only. System generated globally unique ID for the task. This ID will be different if the task is deleted and re-created with the same name.',
    )
    updateTime: Optional[str] = Field(
        None, description='Output only. The time when the task was last updated.'
    )


class GoogleCloudDataplexV1Zone(BaseModel):
    assetStatus: Optional[GoogleCloudDataplexV1AssetStatus] = Field(
        None,
        description='Output only. Aggregated status of the underlying assets of the zone.',
    )
    createTime: Optional[str] = Field(
        None, description='Output only. The time when the zone was created.'
    )
    description: Optional[str] = Field(
        None, description='Optional. Description of the zone.'
    )
    discoverySpec: Optional[GoogleCloudDataplexV1ZoneDiscoverySpec] = Field(
        None,
        description='Optional. Specification of the discovery feature applied to data in this zone.',
    )
    displayName: Optional[str] = Field(
        None, description='Optional. User friendly display name.'
    )
    labels: Optional[Dict[str, str]] = Field(
        None, description='Optional. User defined labels for the zone.'
    )
    name: Optional[str] = Field(
        None,
        description='Output only. The relative resource name of the zone, of the form: projects/{project_number}/locations/{location_id}/lakes/{lake_id}/zones/{zone_id}.',
    )
    resourceSpec: Optional[GoogleCloudDataplexV1ZoneResourceSpec] = Field(
        None,
        description='Required. Specification of the resources that are referenced by the assets within this zone.',
    )
    state: Optional[State12] = Field(
        None, description='Output only. Current state of the zone.'
    )
    type: Optional[Type13] = Field(
        None, description='Required. Immutable. The type of the zone.'
    )
    uid: Optional[str] = Field(
        None,
        description='Output only. System generated globally unique ID for the zone. This ID will be different if the zone is deleted and re-created with the same name.',
    )
    updateTime: Optional[str] = Field(
        None, description='Output only. The time when the zone was last updated.'
    )


class GoogleLongrunningListOperationsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None, description='The standard List next-page token.'
    )
    operations: Optional[List[GoogleLongrunningOperation]] = Field(
        None,
        description='A list of operations that matches the specified filter in the request.',
    )


class GoogleCloudDataplexV1DataProfileResultProfile(BaseModel):
    fields: Optional[List[GoogleCloudDataplexV1DataProfileResultProfileField]] = Field(
        None,
        description='List of fields with structural and profile information for each field.',
    )


class GoogleCloudDataplexV1ListTasksResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='Token to retrieve the next page of results, or empty if there are no more results in the list.',
    )
    tasks: Optional[List[GoogleCloudDataplexV1Task]] = Field(
        None, description='Tasks under the given parent lake.'
    )
    unreachableLocations: Optional[List[str]] = Field(
        None, description='Locations that could not be reached.'
    )


class GoogleCloudDataplexV1ListZonesResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='Token to retrieve the next page of results, or empty if there are no more results in the list.',
    )
    zones: Optional[List[GoogleCloudDataplexV1Zone]] = Field(
        None, description='Zones under the given parent lake.'
    )


class GoogleCloudDataplexV1DataProfileResult(BaseModel):
    profile: Optional[GoogleCloudDataplexV1DataProfileResultProfile] = Field(
        None, description='The profile information per field.'
    )
    rowCount: Optional[str] = Field(None, description='The count of rows scanned.')
    scannedData: Optional[GoogleCloudDataplexV1ScannedData] = Field(
        None, description='The data scanned for this result.'
    )


class GoogleCloudDataplexV1DataScan(BaseModel):
    createTime: Optional[str] = Field(
        None, description='Output only. The time when the scan was created.'
    )
    data: Optional[GoogleCloudDataplexV1DataSource] = Field(
        None, description='Required. The data source for DataScan.'
    )
    dataProfileResult: Optional[GoogleCloudDataplexV1DataProfileResult] = Field(
        None, description='Output only. The result of the data profile scan.'
    )
    dataProfileSpec: Optional[GoogleCloudDataplexV1DataProfileSpec] = Field(
        None, description='DataProfileScan related setting.'
    )
    dataQualityResult: Optional[GoogleCloudDataplexV1DataQualityResult] = Field(
        None, description='Output only. The result of the data quality scan.'
    )
    dataQualitySpec: Optional[GoogleCloudDataplexV1DataQualitySpec] = Field(
        None, description='DataQualityScan related setting.'
    )
    description: Optional[str] = Field(
        None,
        description='Optional. Description of the scan. Must be between 1-1024 characters.',
    )
    displayName: Optional[str] = Field(
        None,
        description='Optional. User friendly display name. Must be between 1-256 characters.',
    )
    executionSpec: Optional[GoogleCloudDataplexV1DataScanExecutionSpec] = Field(
        None,
        description='Optional. DataScan execution settings.If not specified, the fields in it will use their default values.',
    )
    executionStatus: Optional[GoogleCloudDataplexV1DataScanExecutionStatus] = Field(
        None, description='Output only. Status of the data scan execution.'
    )
    labels: Optional[Dict[str, str]] = Field(
        None, description='Optional. User-defined labels for the scan.'
    )
    name: Optional[str] = Field(
        None,
        description='Output only. The relative resource name of the scan, of the form: projects/{project}/locations/{location_id}/dataScans/{datascan_id}, where project refers to a project_id or project_number and location_id refers to a GCP region.',
    )
    state: Optional[State4] = Field(
        None, description='Output only. Current state of the DataScan.'
    )
    type: Optional[Type1] = Field(
        None, description='Output only. The type of DataScan.'
    )
    uid: Optional[str] = Field(
        None,
        description='Output only. System generated globally unique ID for the scan. This ID will be different if the scan is deleted and re-created with the same name.',
    )
    updateTime: Optional[str] = Field(
        None, description='Output only. The time when the scan was last updated.'
    )


class GoogleCloudDataplexV1DataScanJob(BaseModel):
    dataProfileResult: Optional[GoogleCloudDataplexV1DataProfileResult] = Field(
        None, description='Output only. The result of the data profile scan.'
    )
    dataProfileSpec: Optional[GoogleCloudDataplexV1DataProfileSpec] = Field(
        None, description='Output only. DataProfileScan related setting.'
    )
    dataQualityResult: Optional[GoogleCloudDataplexV1DataQualityResult] = Field(
        None, description='Output only. The result of the data quality scan.'
    )
    dataQualitySpec: Optional[GoogleCloudDataplexV1DataQualitySpec] = Field(
        None, description='Output only. DataQualityScan related setting.'
    )
    endTime: Optional[str] = Field(
        None, description='Output only. The time when the DataScanJob ended.'
    )
    message: Optional[str] = Field(
        None, description='Output only. Additional information about the current state.'
    )
    name: Optional[str] = Field(
        None,
        description='Output only. The relative resource name of the DataScanJob, of the form: projects/{project}/locations/{location_id}/dataScans/{datascan_id}/jobs/{job_id}, where project refers to a project_id or project_number and location_id refers to a GCP region.',
    )
    startTime: Optional[str] = Field(
        None, description='Output only. The time when the DataScanJob was started.'
    )
    state: Optional[State6] = Field(
        None, description='Output only. Execution state for the DataScanJob.'
    )
    type: Optional[Type3] = Field(
        None, description='Output only. The type of the parent DataScan.'
    )
    uid: Optional[str] = Field(
        None,
        description='Output only. System generated globally unique ID for the DataScanJob.',
    )


class GoogleCloudDataplexV1ListDataScanJobsResponse(BaseModel):
    dataScanJobs: Optional[List[GoogleCloudDataplexV1DataScanJob]] = Field(
        None, description='DataScanJobs (BASIC view only) under a given dataScan.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='Token to retrieve the next page of results, or empty if there are no more results in the list.',
    )


class GoogleCloudDataplexV1ListDataScansResponse(BaseModel):
    dataScans: Optional[List[GoogleCloudDataplexV1DataScan]] = Field(
        None, description='DataScans (BASIC view only) under the given parent location.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='Token to retrieve the next page of results, or empty if there are no more results in the list.',
    )
    unreachable: Optional[List[str]] = Field(
        None, description='Locations that could not be reached.'
    )


class GoogleCloudDataplexV1RunDataScanResponse(BaseModel):
    job: Optional[GoogleCloudDataplexV1DataScanJob] = Field(
        None, description='DataScanJob created by RunDataScan request.'
    )


GoogleCloudDataplexV1SchemaSchemaField.model_rebuild()
